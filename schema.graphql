# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

"An object with an ID"
interface Node {
    "The id of the object."
    id: ID!
    "The Stage of an object"
    stage: Stage!
}

union ScheduledOperationAffectedDocument = Asset | Author | Category | Comment | File | Post | SubCategory

type Aggregate {
    count: Int!
}

"Asset system model"
type Asset implements Node {
    "The time the document was created"
    createdAt(
        "Variation of DateTime field to return, allows value from base document, current localization, or combined by returning the newer value of both"
        variation: SystemDateTimeFieldVariation! = COMBINED
    ): DateTime!
    "User that created this document"
    createdBy(
        """

        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `createdBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean,
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `createdBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
    ): User
    "Get the document in other stages"
    documentInStages(
        "Decides if the current stage should be included or not"
        includeCurrent: Boolean! = false,
        "Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree"
        inheritLocale: Boolean! = false,
        "Potential stages that should be returned"
        stages: [Stage!]! = [DRAFT, PUBLISHED]
    ): [Asset!]!
    featuredImagePost(
        after: String,
        before: String,
        first: Int,
        """

        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `featuredImagePost` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean,
        last: Int,
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `featuredImagePost` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!],
        orderBy: PostOrderByInput,
        skip: Int,
        where: PostWhereInput
    ): [Post!]!
    "The file name"
    fileName: String!
    "The file handle"
    handle: String!
    "The height of the file"
    height: Float
    "List of Asset versions"
    history(
        limit: Int! = 10,
        skip: Int! = 0,
        "This is optional and can be used to fetch the document version history for a specific stage instead of the current one"
        stageOverride: Stage
    ): [Version!]!
    "The unique identifier"
    id: ID!
    libraryFileFile(
        after: String,
        before: String,
        first: Int,
        """

        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `libraryFileFile` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean,
        last: Int,
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `libraryFileFile` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!],
        orderBy: FileOrderByInput,
        skip: Int,
        where: FileWhereInput
    ): [File!]!
    "System Locale field"
    locale: Locale!
    "Get the other localizations for this document"
    localizations(
        "Decides if the current locale should be included or not"
        includeCurrent: Boolean! = false,
        """

        Potential locales that should be returned.

        The order of locales will also override locale fall-backing behaviour in the query's subtree.

        Note any related model with localized fields in the query's subtree will be affected.
        The first locale matching the provided list will be returned, localized entries that do not have the provided locale defined will be filtered out.
        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.

        Consider using this in conjunction with forceParentLocale on the children relation fields.
        """
        locales: [Locale!]! = [en]
    ): [Asset!]!
    "The mime type of the file"
    mimeType: String
    photoAuthor(
        after: String,
        before: String,
        first: Int,
        """

        Sets the locale of the parent document as the first locale in the fallback locales in the query's subtree.

        Note that `photoAuthor` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
        The first locale matching the provided list will be returned, localized entries that do not have the provided locale defined will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean,
        last: Int,
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `photoAuthor` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
        The first locale matching the provided list will be returned, localized entries that do not have the provided locale defined will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!],
        orderBy: AuthorOrderByInput,
        skip: Int,
        where: AuthorWhereInput
    ): [Author!]!
    "The time the document was published. Null on documents in draft stage."
    publishedAt(
        "Variation of DateTime field to return, allows value from base document, current localization, or combined by returning the newer value of both"
        variation: SystemDateTimeFieldVariation! = COMBINED
    ): DateTime
    "User that last published this document"
    publishedBy(
        """

        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `publishedBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean,
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `publishedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
    ): User
    scheduledIn(
        after: String,
        before: String,
        first: Int,
        """

        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `scheduledIn` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean,
        last: Int,
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `scheduledIn` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!],
        skip: Int,
        where: ScheduledOperationWhereInput
    ): [ScheduledOperation!]!
    "The file size"
    size: Float
    "System stage field"
    stage: Stage!
    "The time the document was updated"
    updatedAt(
        "Variation of DateTime field to return, allows value from base document, current localization, or combined by returning the newer value of both"
        variation: SystemDateTimeFieldVariation! = COMBINED
    ): DateTime!
    "User that last updated this document"
    updatedBy(
        """

        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `updatedBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean,
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `updatedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
    ): User
    "Get the url for the asset with provided transformations applied."
    url(transformation: AssetTransformationInput): String!
    "The file width"
    width: Float
}

"A connection to a list of items."
type AssetConnection {
    aggregate: Aggregate!
    "A list of edges."
    edges: [AssetEdge!]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
}

"An edge in a connection."
type AssetEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: Asset!
}

type Author implements Node {
    bio: String
    "The time the document was created"
    createdAt(
        "Variation of DateTime field to return, allows value from base document, current localization, or combined by returning the newer value of both"
        variation: SystemDateTimeFieldVariation! = COMBINED
    ): DateTime!
    "User that created this document"
    createdBy(
        """

        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `createdBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean,
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `createdBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
    ): User
    "Get the document in other stages"
    documentInStages(
        "Decides if the current stage should be included or not"
        includeCurrent: Boolean! = false,
        "Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree"
        inheritLocale: Boolean! = false,
        "Potential stages that should be returned"
        stages: [Stage!]! = [DRAFT, PUBLISHED]
    ): [Author!]!
    "List of Author versions"
    history(
        limit: Int! = 10,
        skip: Int! = 0,
        "This is optional and can be used to fetch the document version history for a specific stage instead of the current one"
        stageOverride: Stage
    ): [Version!]!
    "The unique identifier"
    id: ID!
    "System Locale field"
    locale: Locale!
    "Get the other localizations for this document"
    localizations(
        "Decides if the current locale should be included or not"
        includeCurrent: Boolean! = false,
        """

        Potential locales that should be returned.

        The order of locales will also override locale fall-backing behaviour in the query's subtree.

        Note any related model with localized fields in the query's subtree will be affected.
        The first locale matching the provided list will be returned, localized entries that do not have the provided locale defined will be filtered out.
        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.

        Consider using this in conjunction with forceParentLocale on the children relation fields.
        """
        locales: [Locale!]! = [en]
    ): [Author!]!
    name: String!
    photo(
        """

        Sets the locale of the parent document as the first locale in the fallback locales in the query's subtree.

        Note that `photo` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
        The first locale matching the provided list will be returned, localized entries that do not have the provided locale defined will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean,
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `photo` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
        The first locale matching the provided list will be returned, localized entries that do not have the provided locale defined will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
    ): Asset
    posts(
        after: String,
        before: String,
        first: Int,
        """

        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `posts` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean,
        last: Int,
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `posts` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!],
        orderBy: PostOrderByInput,
        skip: Int,
        where: PostWhereInput
    ): [Post!]!
    pronouns: String!
    "The time the document was published. Null on documents in draft stage."
    publishedAt(
        "Variation of DateTime field to return, allows value from base document, current localization, or combined by returning the newer value of both"
        variation: SystemDateTimeFieldVariation! = COMBINED
    ): DateTime
    "User that last published this document"
    publishedBy(
        """

        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `publishedBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean,
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `publishedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
    ): User
    scheduledIn(
        after: String,
        before: String,
        first: Int,
        """

        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `scheduledIn` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean,
        last: Int,
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `scheduledIn` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!],
        skip: Int,
        where: ScheduledOperationWhereInput
    ): [ScheduledOperation!]!
    "System stage field"
    stage: Stage!
    "The time the document was updated"
    updatedAt(
        "Variation of DateTime field to return, allows value from base document, current localization, or combined by returning the newer value of both"
        variation: SystemDateTimeFieldVariation! = COMBINED
    ): DateTime!
    "User that last updated this document"
    updatedBy(
        """

        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `updatedBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean,
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `updatedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
    ): User
}

"A connection to a list of items."
type AuthorConnection {
    aggregate: Aggregate!
    "A list of edges."
    edges: [AuthorEdge!]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
}

"An edge in a connection."
type AuthorEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: Author!
}

type BatchPayload {
    "The number of nodes that have been affected by the Batch operation."
    count: Long!
}

"Categoria divide o conteúdo do site de acordo com o que aquilo é principalmente, um artigo, um post, uma notícia ou um arquivo"
type Category implements Node {
    "The time the document was created"
    createdAt: DateTime!
    "User that created this document"
    createdBy(
        """

        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `createdBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean,
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `createdBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
    ): User
    "Get the document in other stages"
    documentInStages(
        "Decides if the current stage should be included or not"
        includeCurrent: Boolean! = false,
        "Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree"
        inheritLocale: Boolean! = false,
        "Potential stages that should be returned"
        stages: [Stage!]! = [DRAFT, PUBLISHED]
    ): [Category!]!
    files(
        after: String,
        before: String,
        first: Int,
        """

        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `files` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean,
        last: Int,
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `files` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!],
        orderBy: FileOrderByInput,
        skip: Int,
        where: FileWhereInput
    ): [File!]!
    "List of Category versions"
    history(
        limit: Int! = 10,
        skip: Int! = 0,
        "This is optional and can be used to fetch the document version history for a specific stage instead of the current one"
        stageOverride: Stage
    ): [Version!]!
    "The unique identifier"
    id: ID!
    name: String!
    posts(
        after: String,
        before: String,
        first: Int,
        """

        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `posts` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean,
        last: Int,
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `posts` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!],
        orderBy: PostOrderByInput,
        skip: Int,
        where: PostWhereInput
    ): [Post!]!
    "The time the document was published. Null on documents in draft stage."
    publishedAt: DateTime
    "User that last published this document"
    publishedBy(
        """

        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `publishedBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean,
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `publishedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
    ): User
    scheduledIn(
        after: String,
        before: String,
        first: Int,
        """

        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `scheduledIn` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean,
        last: Int,
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `scheduledIn` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!],
        skip: Int,
        where: ScheduledOperationWhereInput
    ): [ScheduledOperation!]!
    slug: String!
    "System stage field"
    stage: Stage!
    "The time the document was updated"
    updatedAt: DateTime!
    "User that last updated this document"
    updatedBy(
        """

        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `updatedBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean,
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `updatedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
    ): User
}

"A connection to a list of items."
type CategoryConnection {
    aggregate: Aggregate!
    "A list of edges."
    edges: [CategoryEdge!]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
}

"An edge in a connection."
type CategoryEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: Category!
}

"Representing a color value comprising of HEX, RGBA and css color values"
type Color {
    css: String!
    hex: Hex!
    rgba: RGBA!
}

type Comment implements Node {
    comment: String!
    "The time the document was created"
    createdAt: DateTime!
    "User that created this document"
    createdBy(
        """

        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `createdBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean,
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `createdBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
    ): User
    "Get the document in other stages"
    documentInStages(
        "Decides if the current stage should be included or not"
        includeCurrent: Boolean! = false,
        "Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree"
        inheritLocale: Boolean! = false,
        "Potential stages that should be returned"
        stages: [Stage!]! = [DRAFT, PUBLISHED]
    ): [Comment!]!
    email: String!
    "List of Comment versions"
    history(
        limit: Int! = 10,
        skip: Int! = 0,
        "This is optional and can be used to fetch the document version history for a specific stage instead of the current one"
        stageOverride: Stage
    ): [Version!]!
    "The unique identifier"
    id: ID!
    name: String!
    post(
        """

        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `post` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean,
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `post` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
    ): Post
    "The time the document was published. Null on documents in draft stage."
    publishedAt: DateTime
    "User that last published this document"
    publishedBy(
        """

        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `publishedBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean,
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `publishedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
    ): User
    scheduledIn(
        after: String,
        before: String,
        first: Int,
        """

        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `scheduledIn` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean,
        last: Int,
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `scheduledIn` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!],
        skip: Int,
        where: ScheduledOperationWhereInput
    ): [ScheduledOperation!]!
    "System stage field"
    stage: Stage!
    "The time the document was updated"
    updatedAt: DateTime!
    "User that last updated this document"
    updatedBy(
        """

        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `updatedBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean,
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `updatedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
    ): User
}

"A connection to a list of items."
type CommentConnection {
    aggregate: Aggregate!
    "A list of edges."
    edges: [CommentEdge!]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
}

"An edge in a connection."
type CommentEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: Comment!
}

type DocumentVersion {
    createdAt: DateTime!
    data: Json
    id: ID!
    revision: Int!
    stage: Stage!
}

type File implements Node {
    accessCount: Int!
    author: String!
    category(
        """

        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `category` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean,
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `category` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
    ): Category
    "The time the document was created"
    createdAt: DateTime!
    "User that created this document"
    createdBy(
        """

        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `createdBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean,
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `createdBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
    ): User
    description: String!
    "Get the document in other stages"
    documentInStages(
        "Decides if the current stage should be included or not"
        includeCurrent: Boolean! = false,
        "Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree"
        inheritLocale: Boolean! = false,
        "Potential stages that should be returned"
        stages: [Stage!]! = [DRAFT, PUBLISHED]
    ): [File!]!
    "List of File versions"
    history(
        limit: Int! = 10,
        skip: Int! = 0,
        "This is optional and can be used to fetch the document version history for a specific stage instead of the current one"
        stageOverride: Stage
    ): [Version!]!
    "The unique identifier"
    id: ID!
    libraryFile(
        """

        Sets the locale of the parent document as the first locale in the fallback locales in the query's subtree.

        Note that `libraryFile` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
        The first locale matching the provided list will be returned, localized entries that do not have the provided locale defined will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean,
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `libraryFile` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
        The first locale matching the provided list will be returned, localized entries that do not have the provided locale defined will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
    ): Asset
    mirrorUrl: String!
    name: String!
    publicationYear: Int!
    "The time the document was published. Null on documents in draft stage."
    publishedAt: DateTime
    "User that last published this document"
    publishedBy(
        """

        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `publishedBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean,
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `publishedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
    ): User
    scheduledIn(
        after: String,
        before: String,
        first: Int,
        """

        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `scheduledIn` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean,
        last: Int,
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `scheduledIn` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!],
        skip: Int,
        where: ScheduledOperationWhereInput
    ): [ScheduledOperation!]!
    slug: String!
    "System stage field"
    stage: Stage!
    subCategories(
        after: String,
        before: String,
        first: Int,
        """

        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `subCategories` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean,
        last: Int,
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `subCategories` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!],
        orderBy: SubCategoryOrderByInput,
        skip: Int,
        where: SubCategoryWhereInput
    ): [SubCategory!]!
    "The time the document was updated"
    updatedAt: DateTime!
    "User that last updated this document"
    updatedBy(
        """

        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `updatedBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean,
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `updatedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
    ): User
}

"A connection to a list of items."
type FileConnection {
    aggregate: Aggregate!
    "A list of edges."
    edges: [FileEdge!]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
}

"An edge in a connection."
type FileEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: File!
}

"Representing a geolocation point with latitude and longitude"
type Location {
    distance(from: LocationInput!): Float!
    latitude: Float!
    longitude: Float!
}

type Mutation {
    "Create one asset"
    createAsset(data: AssetCreateInput!): Asset @deprecated(reason: "Asset mutations will be overhauled soon")
    "Create one author"
    createAuthor(data: AuthorCreateInput!): Author
    "Create one category"
    createCategory(data: CategoryCreateInput!): Category
    "Create one comment"
    createComment(data: CommentCreateInput!): Comment
    "Create one file"
    createFile(data: FileCreateInput!): File
    "Create one post"
    createPost(data: PostCreateInput!): Post
    "Create one scheduledRelease"
    createScheduledRelease(data: ScheduledReleaseCreateInput!): ScheduledRelease
    "Create one subCategory"
    createSubCategory(data: SubCategoryCreateInput!): SubCategory
    "Delete one asset from _all_ existing stages. Returns deleted document."
    deleteAsset(
        "Document to delete"
        where: AssetWhereUniqueInput!
    ): Asset
    "Delete one author from _all_ existing stages. Returns deleted document."
    deleteAuthor(
        "Document to delete"
        where: AuthorWhereUniqueInput!
    ): Author
    "Delete one category from _all_ existing stages. Returns deleted document."
    deleteCategory(
        "Document to delete"
        where: CategoryWhereUniqueInput!
    ): Category
    "Delete one comment from _all_ existing stages. Returns deleted document."
    deleteComment(
        "Document to delete"
        where: CommentWhereUniqueInput!
    ): Comment
    "Delete one file from _all_ existing stages. Returns deleted document."
    deleteFile(
        "Document to delete"
        where: FileWhereUniqueInput!
    ): File
    "Delete many Asset documents"
    deleteManyAssets(
        "Documents to delete"
        where: AssetManyWhereInput
    ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (deleteManyAssetsConnection)")
    "Delete many Asset documents, return deleted documents"
    deleteManyAssetsConnection(
        after: ID,
        before: ID,
        first: Int,
        last: Int,
        skip: Int,
        "Documents to delete"
        where: AssetManyWhereInput
    ): AssetConnection!
    "Delete many Author documents"
    deleteManyAuthors(
        "Documents to delete"
        where: AuthorManyWhereInput
    ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (deleteManyAuthorsConnection)")
    "Delete many Author documents, return deleted documents"
    deleteManyAuthorsConnection(
        after: ID,
        before: ID,
        first: Int,
        last: Int,
        skip: Int,
        "Documents to delete"
        where: AuthorManyWhereInput
    ): AuthorConnection!
    "Delete many Category documents"
    deleteManyCategories(
        "Documents to delete"
        where: CategoryManyWhereInput
    ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (deleteManyCategoriesConnection)")
    "Delete many Category documents, return deleted documents"
    deleteManyCategoriesConnection(
        after: ID,
        before: ID,
        first: Int,
        last: Int,
        skip: Int,
        "Documents to delete"
        where: CategoryManyWhereInput
    ): CategoryConnection!
    "Delete many Comment documents"
    deleteManyComments(
        "Documents to delete"
        where: CommentManyWhereInput
    ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (deleteManyCommentsConnection)")
    "Delete many Comment documents, return deleted documents"
    deleteManyCommentsConnection(
        after: ID,
        before: ID,
        first: Int,
        last: Int,
        skip: Int,
        "Documents to delete"
        where: CommentManyWhereInput
    ): CommentConnection!
    "Delete many File documents"
    deleteManyFiles(
        "Documents to delete"
        where: FileManyWhereInput
    ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (deleteManyFilesConnection)")
    "Delete many File documents, return deleted documents"
    deleteManyFilesConnection(
        after: ID,
        before: ID,
        first: Int,
        last: Int,
        skip: Int,
        "Documents to delete"
        where: FileManyWhereInput
    ): FileConnection!
    "Delete many Post documents"
    deleteManyPosts(
        "Documents to delete"
        where: PostManyWhereInput
    ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (deleteManyPostsConnection)")
    "Delete many Post documents, return deleted documents"
    deleteManyPostsConnection(
        after: ID,
        before: ID,
        first: Int,
        last: Int,
        skip: Int,
        "Documents to delete"
        where: PostManyWhereInput
    ): PostConnection!
    "Delete many SubCategory documents"
    deleteManySubCategories(
        "Documents to delete"
        where: SubCategoryManyWhereInput
    ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (deleteManySubCategoriesConnection)")
    "Delete many SubCategory documents, return deleted documents"
    deleteManySubCategoriesConnection(
        after: ID,
        before: ID,
        first: Int,
        last: Int,
        skip: Int,
        "Documents to delete"
        where: SubCategoryManyWhereInput
    ): SubCategoryConnection!
    "Delete one post from _all_ existing stages. Returns deleted document."
    deletePost(
        "Document to delete"
        where: PostWhereUniqueInput!
    ): Post
    "Delete and return scheduled operation"
    deleteScheduledOperation(
        "Document to delete"
        where: ScheduledOperationWhereUniqueInput!
    ): ScheduledOperation
    "Delete one scheduledRelease from _all_ existing stages. Returns deleted document."
    deleteScheduledRelease(
        "Document to delete"
        where: ScheduledReleaseWhereUniqueInput!
    ): ScheduledRelease
    "Delete one subCategory from _all_ existing stages. Returns deleted document."
    deleteSubCategory(
        "Document to delete"
        where: SubCategoryWhereUniqueInput!
    ): SubCategory
    "Publish one asset"
    publishAsset(
        "Optional localizations to publish"
        locales: [Locale!],
        "Whether to publish the base document"
        publishBase: Boolean = true,
        "Publishing target stage"
        to: [Stage!]! = [PUBLISHED],
        "Document to publish"
        where: AssetWhereUniqueInput!,
        "Whether to include the default locale when publishBase is set"
        withDefaultLocale: Boolean = true
    ): Asset
    "Publish one author"
    publishAuthor(
        "Optional localizations to publish"
        locales: [Locale!],
        "Whether to publish the base document"
        publishBase: Boolean = true,
        "Publishing target stage"
        to: [Stage!]! = [PUBLISHED],
        "Document to publish"
        where: AuthorWhereUniqueInput!,
        "Whether to include the default locale when publishBase is set"
        withDefaultLocale: Boolean = true
    ): Author
    "Publish one category"
    publishCategory(
        "Publishing target stage"
        to: [Stage!]! = [PUBLISHED],
        "Document to publish"
        where: CategoryWhereUniqueInput!
    ): Category
    "Publish one comment"
    publishComment(
        "Publishing target stage"
        to: [Stage!]! = [PUBLISHED],
        "Document to publish"
        where: CommentWhereUniqueInput!
    ): Comment
    "Publish one file"
    publishFile(
        "Publishing target stage"
        to: [Stage!]! = [PUBLISHED],
        "Document to publish"
        where: FileWhereUniqueInput!
    ): File
    "Publish many Asset documents"
    publishManyAssets(
        "Document localizations to publish"
        locales: [Locale!],
        "Whether to publish the base document"
        publishBase: Boolean = true,
        "Stages to publish documents to"
        to: [Stage!]! = [PUBLISHED],
        "Identifies documents in each stage to be published"
        where: AssetManyWhereInput,
        "Whether to include the default locale when publishBase is true"
        withDefaultLocale: Boolean = true
    ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (publishManyAssetsConnection)")
    "Publish many Asset documents"
    publishManyAssetsConnection(
        after: ID,
        before: ID,
        first: Int,
        "Stage to find matching documents in"
        from: Stage = DRAFT,
        last: Int,
        "Document localizations to publish"
        locales: [Locale!],
        "Whether to publish the base document"
        publishBase: Boolean = true,
        skip: Int,
        "Stages to publish documents to"
        to: [Stage!]! = [PUBLISHED],
        "Identifies documents in each stage to be published"
        where: AssetManyWhereInput,
        "Whether to include the default locale when publishBase is true"
        withDefaultLocale: Boolean = true
    ): AssetConnection!
    "Publish many Author documents"
    publishManyAuthors(
        "Document localizations to publish"
        locales: [Locale!],
        "Whether to publish the base document"
        publishBase: Boolean = true,
        "Stages to publish documents to"
        to: [Stage!]! = [PUBLISHED],
        "Identifies documents in each stage to be published"
        where: AuthorManyWhereInput,
        "Whether to include the default locale when publishBase is true"
        withDefaultLocale: Boolean = true
    ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (publishManyAuthorsConnection)")
    "Publish many Author documents"
    publishManyAuthorsConnection(
        after: ID,
        before: ID,
        first: Int,
        "Stage to find matching documents in"
        from: Stage = DRAFT,
        last: Int,
        "Document localizations to publish"
        locales: [Locale!],
        "Whether to publish the base document"
        publishBase: Boolean = true,
        skip: Int,
        "Stages to publish documents to"
        to: [Stage!]! = [PUBLISHED],
        "Identifies documents in each stage to be published"
        where: AuthorManyWhereInput,
        "Whether to include the default locale when publishBase is true"
        withDefaultLocale: Boolean = true
    ): AuthorConnection!
    "Publish many Category documents"
    publishManyCategories(
        "Stages to publish documents to"
        to: [Stage!]! = [PUBLISHED],
        "Identifies documents in each stage to be published"
        where: CategoryManyWhereInput
    ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (publishManyCategoriesConnection)")
    "Publish many Category documents"
    publishManyCategoriesConnection(
        after: ID,
        before: ID,
        first: Int,
        "Stage to find matching documents in"
        from: Stage = DRAFT,
        last: Int,
        skip: Int,
        "Stages to publish documents to"
        to: [Stage!]! = [PUBLISHED],
        "Identifies documents in each stage to be published"
        where: CategoryManyWhereInput
    ): CategoryConnection!
    "Publish many Comment documents"
    publishManyComments(
        "Stages to publish documents to"
        to: [Stage!]! = [PUBLISHED],
        "Identifies documents in each stage to be published"
        where: CommentManyWhereInput
    ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (publishManyCommentsConnection)")
    "Publish many Comment documents"
    publishManyCommentsConnection(
        after: ID,
        before: ID,
        first: Int,
        "Stage to find matching documents in"
        from: Stage = DRAFT,
        last: Int,
        skip: Int,
        "Stages to publish documents to"
        to: [Stage!]! = [PUBLISHED],
        "Identifies documents in each stage to be published"
        where: CommentManyWhereInput
    ): CommentConnection!
    "Publish many File documents"
    publishManyFiles(
        "Stages to publish documents to"
        to: [Stage!]! = [PUBLISHED],
        "Identifies documents in each stage to be published"
        where: FileManyWhereInput
    ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (publishManyFilesConnection)")
    "Publish many File documents"
    publishManyFilesConnection(
        after: ID,
        before: ID,
        first: Int,
        "Stage to find matching documents in"
        from: Stage = DRAFT,
        last: Int,
        skip: Int,
        "Stages to publish documents to"
        to: [Stage!]! = [PUBLISHED],
        "Identifies documents in each stage to be published"
        where: FileManyWhereInput
    ): FileConnection!
    "Publish many Post documents"
    publishManyPosts(
        "Stages to publish documents to"
        to: [Stage!]! = [PUBLISHED],
        "Identifies documents in each stage to be published"
        where: PostManyWhereInput
    ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (publishManyPostsConnection)")
    "Publish many Post documents"
    publishManyPostsConnection(
        after: ID,
        before: ID,
        first: Int,
        "Stage to find matching documents in"
        from: Stage = DRAFT,
        last: Int,
        skip: Int,
        "Stages to publish documents to"
        to: [Stage!]! = [PUBLISHED],
        "Identifies documents in each stage to be published"
        where: PostManyWhereInput
    ): PostConnection!
    "Publish many SubCategory documents"
    publishManySubCategories(
        "Stages to publish documents to"
        to: [Stage!]! = [PUBLISHED],
        "Identifies documents in each stage to be published"
        where: SubCategoryManyWhereInput
    ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (publishManySubCategoriesConnection)")
    "Publish many SubCategory documents"
    publishManySubCategoriesConnection(
        after: ID,
        before: ID,
        first: Int,
        "Stage to find matching documents in"
        from: Stage = DRAFT,
        last: Int,
        skip: Int,
        "Stages to publish documents to"
        to: [Stage!]! = [PUBLISHED],
        "Identifies documents in each stage to be published"
        where: SubCategoryManyWhereInput
    ): SubCategoryConnection!
    "Publish one post"
    publishPost(
        "Publishing target stage"
        to: [Stage!]! = [PUBLISHED],
        "Document to publish"
        where: PostWhereUniqueInput!
    ): Post
    "Publish one subCategory"
    publishSubCategory(
        "Publishing target stage"
        to: [Stage!]! = [PUBLISHED],
        "Document to publish"
        where: SubCategoryWhereUniqueInput!
    ): SubCategory
    "Schedule to publish one asset"
    schedulePublishAsset(
        "Optional localizations to publish"
        locales: [Locale!],
        "Whether to publish the base document"
        publishBase: Boolean = true,
        "Release at point in time, will create new release containing this operation"
        releaseAt: DateTime,
        "Optionally attach this scheduled operation to an existing release"
        releaseId: String,
        "Publishing target stage"
        to: [Stage!]! = [PUBLISHED],
        "Document to publish"
        where: AssetWhereUniqueInput!,
        "Whether to include the default locale when publishBase is set"
        withDefaultLocale: Boolean = true
    ): Asset
    "Schedule to publish one author"
    schedulePublishAuthor(
        "Optional localizations to publish"
        locales: [Locale!],
        "Whether to publish the base document"
        publishBase: Boolean = true,
        "Release at point in time, will create new release containing this operation"
        releaseAt: DateTime,
        "Optionally attach this scheduled operation to an existing release"
        releaseId: String,
        "Publishing target stage"
        to: [Stage!]! = [PUBLISHED],
        "Document to publish"
        where: AuthorWhereUniqueInput!,
        "Whether to include the default locale when publishBase is set"
        withDefaultLocale: Boolean = true
    ): Author
    "Schedule to publish one category"
    schedulePublishCategory(
        "Release at point in time, will create new release containing this operation"
        releaseAt: DateTime,
        "Optionally attach this scheduled operation to an existing release"
        releaseId: String,
        "Publishing target stage"
        to: [Stage!]! = [PUBLISHED],
        "Document to publish"
        where: CategoryWhereUniqueInput!
    ): Category
    "Schedule to publish one comment"
    schedulePublishComment(
        "Release at point in time, will create new release containing this operation"
        releaseAt: DateTime,
        "Optionally attach this scheduled operation to an existing release"
        releaseId: String,
        "Publishing target stage"
        to: [Stage!]! = [PUBLISHED],
        "Document to publish"
        where: CommentWhereUniqueInput!
    ): Comment
    "Schedule to publish one file"
    schedulePublishFile(
        "Release at point in time, will create new release containing this operation"
        releaseAt: DateTime,
        "Optionally attach this scheduled operation to an existing release"
        releaseId: String,
        "Publishing target stage"
        to: [Stage!]! = [PUBLISHED],
        "Document to publish"
        where: FileWhereUniqueInput!
    ): File
    "Schedule to publish one post"
    schedulePublishPost(
        "Release at point in time, will create new release containing this operation"
        releaseAt: DateTime,
        "Optionally attach this scheduled operation to an existing release"
        releaseId: String,
        "Publishing target stage"
        to: [Stage!]! = [PUBLISHED],
        "Document to publish"
        where: PostWhereUniqueInput!
    ): Post
    "Schedule to publish one subCategory"
    schedulePublishSubCategory(
        "Release at point in time, will create new release containing this operation"
        releaseAt: DateTime,
        "Optionally attach this scheduled operation to an existing release"
        releaseId: String,
        "Publishing target stage"
        to: [Stage!]! = [PUBLISHED],
        "Document to publish"
        where: SubCategoryWhereUniqueInput!
    ): SubCategory
    "Unpublish one asset from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only."
    scheduleUnpublishAsset(
        "Stages to unpublish document from"
        from: [Stage!]! = [PUBLISHED],
        "Optional locales to unpublish. Unpublishing the default locale will completely remove the document from the selected stages"
        locales: [Locale!],
        "Release at point in time, will create new release containing this operation"
        releaseAt: DateTime,
        "Optionally attach this scheduled operation to an existing release"
        releaseId: String,
        "Unpublish complete document including default localization and relations from stages. Can be disabled."
        unpublishBase: Boolean = true,
        "Document to unpublish"
        where: AssetWhereUniqueInput!
    ): Asset
    "Unpublish one author from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only."
    scheduleUnpublishAuthor(
        "Stages to unpublish document from"
        from: [Stage!]! = [PUBLISHED],
        "Optional locales to unpublish. Unpublishing the default locale will completely remove the document from the selected stages"
        locales: [Locale!],
        "Release at point in time, will create new release containing this operation"
        releaseAt: DateTime,
        "Optionally attach this scheduled operation to an existing release"
        releaseId: String,
        "Unpublish complete document including default localization and relations from stages. Can be disabled."
        unpublishBase: Boolean = true,
        "Document to unpublish"
        where: AuthorWhereUniqueInput!
    ): Author
    "Unpublish one category from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only."
    scheduleUnpublishCategory(
        "Stages to unpublish document from"
        from: [Stage!]! = [PUBLISHED],
        "Release at point in time, will create new release containing this operation"
        releaseAt: DateTime,
        "Optionally attach this scheduled operation to an existing release"
        releaseId: String,
        "Document to unpublish"
        where: CategoryWhereUniqueInput!
    ): Category
    "Unpublish one comment from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only."
    scheduleUnpublishComment(
        "Stages to unpublish document from"
        from: [Stage!]! = [PUBLISHED],
        "Release at point in time, will create new release containing this operation"
        releaseAt: DateTime,
        "Optionally attach this scheduled operation to an existing release"
        releaseId: String,
        "Document to unpublish"
        where: CommentWhereUniqueInput!
    ): Comment
    "Unpublish one file from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only."
    scheduleUnpublishFile(
        "Stages to unpublish document from"
        from: [Stage!]! = [PUBLISHED],
        "Release at point in time, will create new release containing this operation"
        releaseAt: DateTime,
        "Optionally attach this scheduled operation to an existing release"
        releaseId: String,
        "Document to unpublish"
        where: FileWhereUniqueInput!
    ): File
    "Unpublish one post from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only."
    scheduleUnpublishPost(
        "Stages to unpublish document from"
        from: [Stage!]! = [PUBLISHED],
        "Release at point in time, will create new release containing this operation"
        releaseAt: DateTime,
        "Optionally attach this scheduled operation to an existing release"
        releaseId: String,
        "Document to unpublish"
        where: PostWhereUniqueInput!
    ): Post
    "Unpublish one subCategory from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only."
    scheduleUnpublishSubCategory(
        "Stages to unpublish document from"
        from: [Stage!]! = [PUBLISHED],
        "Release at point in time, will create new release containing this operation"
        releaseAt: DateTime,
        "Optionally attach this scheduled operation to an existing release"
        releaseId: String,
        "Document to unpublish"
        where: SubCategoryWhereUniqueInput!
    ): SubCategory
    "Unpublish one asset from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only."
    unpublishAsset(
        "Stages to unpublish document from"
        from: [Stage!]! = [PUBLISHED],
        "Optional locales to unpublish. Unpublishing the default locale will completely remove the document from the selected stages"
        locales: [Locale!],
        "Unpublish complete document including default localization and relations from stages. Can be disabled."
        unpublishBase: Boolean = true,
        "Document to unpublish"
        where: AssetWhereUniqueInput!
    ): Asset
    "Unpublish one author from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only."
    unpublishAuthor(
        "Stages to unpublish document from"
        from: [Stage!]! = [PUBLISHED],
        "Optional locales to unpublish. Unpublishing the default locale will completely remove the document from the selected stages"
        locales: [Locale!],
        "Unpublish complete document including default localization and relations from stages. Can be disabled."
        unpublishBase: Boolean = true,
        "Document to unpublish"
        where: AuthorWhereUniqueInput!
    ): Author
    "Unpublish one category from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only."
    unpublishCategory(
        "Stages to unpublish document from"
        from: [Stage!]! = [PUBLISHED],
        "Document to unpublish"
        where: CategoryWhereUniqueInput!
    ): Category
    "Unpublish one comment from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only."
    unpublishComment(
        "Stages to unpublish document from"
        from: [Stage!]! = [PUBLISHED],
        "Document to unpublish"
        where: CommentWhereUniqueInput!
    ): Comment
    "Unpublish one file from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only."
    unpublishFile(
        "Stages to unpublish document from"
        from: [Stage!]! = [PUBLISHED],
        "Document to unpublish"
        where: FileWhereUniqueInput!
    ): File
    "Unpublish many Asset documents"
    unpublishManyAssets(
        "Stages to unpublish documents from"
        from: [Stage!]! = [PUBLISHED],
        "Locales to unpublish"
        locales: [Locale!],
        "Whether to unpublish the base document and default localization"
        unpublishBase: Boolean = true,
        "Identifies documents in each stage"
        where: AssetManyWhereInput
    ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (unpublishManyAssetsConnection)")
    "Find many Asset documents that match criteria in specified stage and unpublish from target stages"
    unpublishManyAssetsConnection(
        after: ID,
        before: ID,
        first: Int,
        "Stages to unpublish documents from"
        from: [Stage!]! = [PUBLISHED],
        last: Int,
        "Locales to unpublish"
        locales: [Locale!],
        skip: Int,
        "Stage to find matching documents in"
        stage: Stage = DRAFT,
        "Whether to unpublish the base document and default localization"
        unpublishBase: Boolean = true,
        "Identifies documents in draft stage"
        where: AssetManyWhereInput
    ): AssetConnection!
    "Unpublish many Author documents"
    unpublishManyAuthors(
        "Stages to unpublish documents from"
        from: [Stage!]! = [PUBLISHED],
        "Locales to unpublish"
        locales: [Locale!],
        "Whether to unpublish the base document and default localization"
        unpublishBase: Boolean = true,
        "Identifies documents in each stage"
        where: AuthorManyWhereInput
    ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (unpublishManyAuthorsConnection)")
    "Find many Author documents that match criteria in specified stage and unpublish from target stages"
    unpublishManyAuthorsConnection(
        after: ID,
        before: ID,
        first: Int,
        "Stages to unpublish documents from"
        from: [Stage!]! = [PUBLISHED],
        last: Int,
        "Locales to unpublish"
        locales: [Locale!],
        skip: Int,
        "Stage to find matching documents in"
        stage: Stage = DRAFT,
        "Whether to unpublish the base document and default localization"
        unpublishBase: Boolean = true,
        "Identifies documents in draft stage"
        where: AuthorManyWhereInput
    ): AuthorConnection!
    "Unpublish many Category documents"
    unpublishManyCategories(
        "Stages to unpublish documents from"
        from: [Stage!]! = [PUBLISHED],
        "Identifies documents in each stage"
        where: CategoryManyWhereInput
    ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (unpublishManyCategoriesConnection)")
    "Find many Category documents that match criteria in specified stage and unpublish from target stages"
    unpublishManyCategoriesConnection(
        after: ID,
        before: ID,
        first: Int,
        "Stages to unpublish documents from"
        from: [Stage!]! = [PUBLISHED],
        last: Int,
        skip: Int,
        "Stage to find matching documents in"
        stage: Stage = DRAFT,
        "Identifies documents in draft stage"
        where: CategoryManyWhereInput
    ): CategoryConnection!
    "Unpublish many Comment documents"
    unpublishManyComments(
        "Stages to unpublish documents from"
        from: [Stage!]! = [PUBLISHED],
        "Identifies documents in each stage"
        where: CommentManyWhereInput
    ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (unpublishManyCommentsConnection)")
    "Find many Comment documents that match criteria in specified stage and unpublish from target stages"
    unpublishManyCommentsConnection(
        after: ID,
        before: ID,
        first: Int,
        "Stages to unpublish documents from"
        from: [Stage!]! = [PUBLISHED],
        last: Int,
        skip: Int,
        "Stage to find matching documents in"
        stage: Stage = DRAFT,
        "Identifies documents in draft stage"
        where: CommentManyWhereInput
    ): CommentConnection!
    "Unpublish many File documents"
    unpublishManyFiles(
        "Stages to unpublish documents from"
        from: [Stage!]! = [PUBLISHED],
        "Identifies documents in each stage"
        where: FileManyWhereInput
    ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (unpublishManyFilesConnection)")
    "Find many File documents that match criteria in specified stage and unpublish from target stages"
    unpublishManyFilesConnection(
        after: ID,
        before: ID,
        first: Int,
        "Stages to unpublish documents from"
        from: [Stage!]! = [PUBLISHED],
        last: Int,
        skip: Int,
        "Stage to find matching documents in"
        stage: Stage = DRAFT,
        "Identifies documents in draft stage"
        where: FileManyWhereInput
    ): FileConnection!
    "Unpublish many Post documents"
    unpublishManyPosts(
        "Stages to unpublish documents from"
        from: [Stage!]! = [PUBLISHED],
        "Identifies documents in each stage"
        where: PostManyWhereInput
    ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (unpublishManyPostsConnection)")
    "Find many Post documents that match criteria in specified stage and unpublish from target stages"
    unpublishManyPostsConnection(
        after: ID,
        before: ID,
        first: Int,
        "Stages to unpublish documents from"
        from: [Stage!]! = [PUBLISHED],
        last: Int,
        skip: Int,
        "Stage to find matching documents in"
        stage: Stage = DRAFT,
        "Identifies documents in draft stage"
        where: PostManyWhereInput
    ): PostConnection!
    "Unpublish many SubCategory documents"
    unpublishManySubCategories(
        "Stages to unpublish documents from"
        from: [Stage!]! = [PUBLISHED],
        "Identifies documents in each stage"
        where: SubCategoryManyWhereInput
    ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (unpublishManySubCategoriesConnection)")
    "Find many SubCategory documents that match criteria in specified stage and unpublish from target stages"
    unpublishManySubCategoriesConnection(
        after: ID,
        before: ID,
        first: Int,
        "Stages to unpublish documents from"
        from: [Stage!]! = [PUBLISHED],
        last: Int,
        skip: Int,
        "Stage to find matching documents in"
        stage: Stage = DRAFT,
        "Identifies documents in draft stage"
        where: SubCategoryManyWhereInput
    ): SubCategoryConnection!
    "Unpublish one post from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only."
    unpublishPost(
        "Stages to unpublish document from"
        from: [Stage!]! = [PUBLISHED],
        "Document to unpublish"
        where: PostWhereUniqueInput!
    ): Post
    "Unpublish one subCategory from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only."
    unpublishSubCategory(
        "Stages to unpublish document from"
        from: [Stage!]! = [PUBLISHED],
        "Document to unpublish"
        where: SubCategoryWhereUniqueInput!
    ): SubCategory
    "Update one asset"
    updateAsset(data: AssetUpdateInput!, where: AssetWhereUniqueInput!): Asset
    "Update one author"
    updateAuthor(data: AuthorUpdateInput!, where: AuthorWhereUniqueInput!): Author
    "Update one category"
    updateCategory(data: CategoryUpdateInput!, where: CategoryWhereUniqueInput!): Category
    "Update one comment"
    updateComment(data: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment
    "Update one file"
    updateFile(data: FileUpdateInput!, where: FileWhereUniqueInput!): File
    "Update many assets"
    updateManyAssets(
        "Updates to document content"
        data: AssetUpdateManyInput!,
        "Documents to apply update on"
        where: AssetManyWhereInput
    ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (updateManyAssetsConnection)")
    "Update many Asset documents"
    updateManyAssetsConnection(
        after: ID,
        before: ID,
        "Updates to document content"
        data: AssetUpdateManyInput!,
        first: Int,
        last: Int,
        skip: Int,
        "Documents to apply update on"
        where: AssetManyWhereInput
    ): AssetConnection!
    "Update many authors"
    updateManyAuthors(
        "Updates to document content"
        data: AuthorUpdateManyInput!,
        "Documents to apply update on"
        where: AuthorManyWhereInput
    ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (updateManyAuthorsConnection)")
    "Update many Author documents"
    updateManyAuthorsConnection(
        after: ID,
        before: ID,
        "Updates to document content"
        data: AuthorUpdateManyInput!,
        first: Int,
        last: Int,
        skip: Int,
        "Documents to apply update on"
        where: AuthorManyWhereInput
    ): AuthorConnection!
    "Update many categories"
    updateManyCategories(
        "Updates to document content"
        data: CategoryUpdateManyInput!,
        "Documents to apply update on"
        where: CategoryManyWhereInput
    ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (updateManyCategoriesConnection)")
    "Update many Category documents"
    updateManyCategoriesConnection(
        after: ID,
        before: ID,
        "Updates to document content"
        data: CategoryUpdateManyInput!,
        first: Int,
        last: Int,
        skip: Int,
        "Documents to apply update on"
        where: CategoryManyWhereInput
    ): CategoryConnection!
    "Update many comments"
    updateManyComments(
        "Updates to document content"
        data: CommentUpdateManyInput!,
        "Documents to apply update on"
        where: CommentManyWhereInput
    ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (updateManyCommentsConnection)")
    "Update many Comment documents"
    updateManyCommentsConnection(
        after: ID,
        before: ID,
        "Updates to document content"
        data: CommentUpdateManyInput!,
        first: Int,
        last: Int,
        skip: Int,
        "Documents to apply update on"
        where: CommentManyWhereInput
    ): CommentConnection!
    "Update many files"
    updateManyFiles(
        "Updates to document content"
        data: FileUpdateManyInput!,
        "Documents to apply update on"
        where: FileManyWhereInput
    ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (updateManyFilesConnection)")
    "Update many File documents"
    updateManyFilesConnection(
        after: ID,
        before: ID,
        "Updates to document content"
        data: FileUpdateManyInput!,
        first: Int,
        last: Int,
        skip: Int,
        "Documents to apply update on"
        where: FileManyWhereInput
    ): FileConnection!
    "Update many posts"
    updateManyPosts(
        "Updates to document content"
        data: PostUpdateManyInput!,
        "Documents to apply update on"
        where: PostManyWhereInput
    ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (updateManyPostsConnection)")
    "Update many Post documents"
    updateManyPostsConnection(
        after: ID,
        before: ID,
        "Updates to document content"
        data: PostUpdateManyInput!,
        first: Int,
        last: Int,
        skip: Int,
        "Documents to apply update on"
        where: PostManyWhereInput
    ): PostConnection!
    "Update many subCategories"
    updateManySubCategories(
        "Updates to document content"
        data: SubCategoryUpdateManyInput!,
        "Documents to apply update on"
        where: SubCategoryManyWhereInput
    ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (updateManySubCategoriesConnection)")
    "Update many SubCategory documents"
    updateManySubCategoriesConnection(
        after: ID,
        before: ID,
        "Updates to document content"
        data: SubCategoryUpdateManyInput!,
        first: Int,
        last: Int,
        skip: Int,
        "Documents to apply update on"
        where: SubCategoryManyWhereInput
    ): SubCategoryConnection!
    "Update one post"
    updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
    "Update one scheduledRelease"
    updateScheduledRelease(data: ScheduledReleaseUpdateInput!, where: ScheduledReleaseWhereUniqueInput!): ScheduledRelease
    "Update one subCategory"
    updateSubCategory(data: SubCategoryUpdateInput!, where: SubCategoryWhereUniqueInput!): SubCategory
    "Upsert one asset"
    upsertAsset(upsert: AssetUpsertInput!, where: AssetWhereUniqueInput!): Asset
    "Upsert one author"
    upsertAuthor(upsert: AuthorUpsertInput!, where: AuthorWhereUniqueInput!): Author
    "Upsert one category"
    upsertCategory(upsert: CategoryUpsertInput!, where: CategoryWhereUniqueInput!): Category
    "Upsert one comment"
    upsertComment(upsert: CommentUpsertInput!, where: CommentWhereUniqueInput!): Comment
    "Upsert one file"
    upsertFile(upsert: FileUpsertInput!, where: FileWhereUniqueInput!): File
    "Upsert one post"
    upsertPost(upsert: PostUpsertInput!, where: PostWhereUniqueInput!): Post
    "Upsert one subCategory"
    upsertSubCategory(upsert: SubCategoryUpsertInput!, where: SubCategoryWhereUniqueInput!): SubCategory
}

"Information about pagination in a connection."
type PageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "Number of items in the current page."
    pageSize: Int
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

type Post implements Node {
    author(
        """

        Sets the locale of the parent document as the first locale in the fallback locales in the query's subtree.

        Note that `author` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
        The first locale matching the provided list will be returned, localized entries that do not have the provided locale defined will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean,
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `author` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
        The first locale matching the provided list will be returned, localized entries that do not have the provided locale defined will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
    ): Author
    category(
        """

        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `category` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean,
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `category` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
    ): Category
    comments(
        after: String,
        before: String,
        first: Int,
        """

        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `comments` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean,
        last: Int,
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `comments` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!],
        orderBy: CommentOrderByInput,
        skip: Int,
        where: CommentWhereInput
    ): [Comment!]!
    content: RichText!
    "The time the document was created"
    createdAt: DateTime!
    "User that created this document"
    createdBy(
        """

        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `createdBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean,
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `createdBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
    ): User
    "Get the document in other stages"
    documentInStages(
        "Decides if the current stage should be included or not"
        includeCurrent: Boolean! = false,
        "Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree"
        inheritLocale: Boolean! = false,
        "Potential stages that should be returned"
        stages: [Stage!]! = [DRAFT, PUBLISHED]
    ): [Post!]!
    excerpt: String!
    featuredImage(
        """

        Sets the locale of the parent document as the first locale in the fallback locales in the query's subtree.

        Note that `featuredImage` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
        The first locale matching the provided list will be returned, localized entries that do not have the provided locale defined will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean,
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `featuredImage` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
        The first locale matching the provided list will be returned, localized entries that do not have the provided locale defined will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
    ): Asset!
    featuredPost: Boolean!
    "List of Post versions"
    history(
        limit: Int! = 10,
        skip: Int! = 0,
        "This is optional and can be used to fetch the document version history for a specific stage instead of the current one"
        stageOverride: Stage
    ): [Version!]!
    "The unique identifier"
    id: ID!
    "The time the document was published. Null on documents in draft stage."
    publishedAt: DateTime
    "User that last published this document"
    publishedBy(
        """

        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `publishedBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean,
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `publishedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
    ): User
    scheduledIn(
        after: String,
        before: String,
        first: Int,
        """

        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `scheduledIn` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean,
        last: Int,
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `scheduledIn` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!],
        skip: Int,
        where: ScheduledOperationWhereInput
    ): [ScheduledOperation!]!
    slug: String!
    "System stage field"
    stage: Stage!
    subCategories(
        after: String,
        before: String,
        first: Int,
        """

        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `subCategories` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean,
        last: Int,
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `subCategories` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!],
        orderBy: SubCategoryOrderByInput,
        skip: Int,
        where: SubCategoryWhereInput
    ): [SubCategory!]!
    title: String!
    "The time the document was updated"
    updatedAt: DateTime!
    "User that last updated this document"
    updatedBy(
        """

        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `updatedBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean,
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `updatedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
    ): User
}

"A connection to a list of items."
type PostConnection {
    aggregate: Aggregate!
    "A list of edges."
    edges: [PostEdge!]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
}

"An edge in a connection."
type PostEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: Post!
}

type Query {
    "Retrieve a single asset"
    asset(
        """

        Defines which locales should be returned.

        Note that `Asset` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
        The first locale matching the provided list will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [Locale!]! = [en],
        stage: Stage! = PUBLISHED,
        where: AssetWhereUniqueInput!
    ): Asset
    "Retrieve document version"
    assetVersion(where: VersionWhereInput!): DocumentVersion
    "Retrieve multiple assets"
    assets(
        after: String,
        before: String,
        first: Int,
        last: Int,
        """

        Defines which locales should be returned.

        Note that `Asset` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
        The first locale matching the provided list will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [Locale!]! = [en],
        orderBy: AssetOrderByInput,
        skip: Int,
        stage: Stage! = PUBLISHED,
        where: AssetWhereInput
    ): [Asset!]!
    "Retrieve multiple assets using the Relay connection interface"
    assetsConnection(
        after: String,
        before: String,
        first: Int,
        last: Int,
        """

        Defines which locales should be returned.

        Note that `Asset` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
        The first locale matching the provided list will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [Locale!]! = [en],
        orderBy: AssetOrderByInput,
        skip: Int,
        stage: Stage! = PUBLISHED,
        where: AssetWhereInput
    ): AssetConnection!
    "Retrieve a single author"
    author(
        """

        Defines which locales should be returned.

        Note that `Author` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
        The first locale matching the provided list will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [Locale!]! = [en],
        stage: Stage! = PUBLISHED,
        where: AuthorWhereUniqueInput!
    ): Author
    "Retrieve document version"
    authorVersion(where: VersionWhereInput!): DocumentVersion
    "Retrieve multiple authors"
    authors(
        after: String,
        before: String,
        first: Int,
        last: Int,
        """

        Defines which locales should be returned.

        Note that `Author` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
        The first locale matching the provided list will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [Locale!]! = [en],
        orderBy: AuthorOrderByInput,
        skip: Int,
        stage: Stage! = PUBLISHED,
        where: AuthorWhereInput
    ): [Author!]!
    "Retrieve multiple authors using the Relay connection interface"
    authorsConnection(
        after: String,
        before: String,
        first: Int,
        last: Int,
        """

        Defines which locales should be returned.

        Note that `Author` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
        The first locale matching the provided list will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [Locale!]! = [en],
        orderBy: AuthorOrderByInput,
        skip: Int,
        stage: Stage! = PUBLISHED,
        where: AuthorWhereInput
    ): AuthorConnection!
    "Retrieve multiple categories"
    categories(
        after: String,
        before: String,
        first: Int,
        last: Int,
        """

        Defines which locales should be returned.

        Note that `Category` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [Locale!]! = [en],
        orderBy: CategoryOrderByInput,
        skip: Int,
        stage: Stage! = PUBLISHED,
        where: CategoryWhereInput
    ): [Category!]!
    "Retrieve multiple categories using the Relay connection interface"
    categoriesConnection(
        after: String,
        before: String,
        first: Int,
        last: Int,
        """

        Defines which locales should be returned.

        Note that `Category` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [Locale!]! = [en],
        orderBy: CategoryOrderByInput,
        skip: Int,
        stage: Stage! = PUBLISHED,
        where: CategoryWhereInput
    ): CategoryConnection!
    "Retrieve a single category"
    category(
        """

        Defines which locales should be returned.

        Note that `Category` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [Locale!]! = [en],
        stage: Stage! = PUBLISHED,
        where: CategoryWhereUniqueInput!
    ): Category
    "Retrieve document version"
    categoryVersion(where: VersionWhereInput!): DocumentVersion
    "Retrieve a single comment"
    comment(
        """

        Defines which locales should be returned.

        Note that `Comment` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [Locale!]! = [en],
        stage: Stage! = PUBLISHED,
        where: CommentWhereUniqueInput!
    ): Comment
    "Retrieve document version"
    commentVersion(where: VersionWhereInput!): DocumentVersion
    "Retrieve multiple comments"
    comments(
        after: String,
        before: String,
        first: Int,
        last: Int,
        """

        Defines which locales should be returned.

        Note that `Comment` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [Locale!]! = [en],
        orderBy: CommentOrderByInput,
        skip: Int,
        stage: Stage! = PUBLISHED,
        where: CommentWhereInput
    ): [Comment!]!
    "Retrieve multiple comments using the Relay connection interface"
    commentsConnection(
        after: String,
        before: String,
        first: Int,
        last: Int,
        """

        Defines which locales should be returned.

        Note that `Comment` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [Locale!]! = [en],
        orderBy: CommentOrderByInput,
        skip: Int,
        stage: Stage! = PUBLISHED,
        where: CommentWhereInput
    ): CommentConnection!
    "Retrieve a single file"
    file(
        """

        Defines which locales should be returned.

        Note that `File` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [Locale!]! = [en],
        stage: Stage! = PUBLISHED,
        where: FileWhereUniqueInput!
    ): File
    "Retrieve document version"
    fileVersion(where: VersionWhereInput!): DocumentVersion
    "Retrieve multiple files"
    files(
        after: String,
        before: String,
        first: Int,
        last: Int,
        """

        Defines which locales should be returned.

        Note that `File` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [Locale!]! = [en],
        orderBy: FileOrderByInput,
        skip: Int,
        stage: Stage! = PUBLISHED,
        where: FileWhereInput
    ): [File!]!
    "Retrieve multiple files using the Relay connection interface"
    filesConnection(
        after: String,
        before: String,
        first: Int,
        last: Int,
        """

        Defines which locales should be returned.

        Note that `File` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [Locale!]! = [en],
        orderBy: FileOrderByInput,
        skip: Int,
        stage: Stage! = PUBLISHED,
        where: FileWhereInput
    ): FileConnection!
    "Fetches an object given its ID"
    node(
        "The ID of an object"
        id: ID!,
        """

        Defines which locales should be returned.

        Note that `Node` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [Locale!]! = [en],
        stage: Stage! = PUBLISHED
    ): Node
    "Retrieve a single post"
    post(
        """

        Defines which locales should be returned.

        Note that `Post` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [Locale!]! = [en],
        stage: Stage! = PUBLISHED,
        where: PostWhereUniqueInput!
    ): Post
    "Retrieve document version"
    postVersion(where: VersionWhereInput!): DocumentVersion
    "Retrieve multiple posts"
    posts(
        after: String,
        before: String,
        first: Int,
        last: Int,
        """

        Defines which locales should be returned.

        Note that `Post` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [Locale!]! = [en],
        orderBy: PostOrderByInput,
        skip: Int,
        stage: Stage! = PUBLISHED,
        where: PostWhereInput
    ): [Post!]!
    "Retrieve multiple posts using the Relay connection interface"
    postsConnection(
        after: String,
        before: String,
        first: Int,
        last: Int,
        """

        Defines which locales should be returned.

        Note that `Post` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [Locale!]! = [en],
        orderBy: PostOrderByInput,
        skip: Int,
        stage: Stage! = PUBLISHED,
        where: PostWhereInput
    ): PostConnection!
    "Retrieve a single scheduledOperation"
    scheduledOperation(
        """

        Defines which locales should be returned.

        Note that `ScheduledOperation` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [Locale!]! = [en],
        stage: Stage! = PUBLISHED,
        where: ScheduledOperationWhereUniqueInput!
    ): ScheduledOperation
    "Retrieve multiple scheduledOperations"
    scheduledOperations(
        after: String,
        before: String,
        first: Int,
        last: Int,
        """

        Defines which locales should be returned.

        Note that `ScheduledOperation` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [Locale!]! = [en],
        orderBy: ScheduledOperationOrderByInput,
        skip: Int,
        stage: Stage! = PUBLISHED,
        where: ScheduledOperationWhereInput
    ): [ScheduledOperation!]!
    "Retrieve multiple scheduledOperations using the Relay connection interface"
    scheduledOperationsConnection(
        after: String,
        before: String,
        first: Int,
        last: Int,
        """

        Defines which locales should be returned.

        Note that `ScheduledOperation` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [Locale!]! = [en],
        orderBy: ScheduledOperationOrderByInput,
        skip: Int,
        stage: Stage! = PUBLISHED,
        where: ScheduledOperationWhereInput
    ): ScheduledOperationConnection!
    "Retrieve a single scheduledRelease"
    scheduledRelease(
        """

        Defines which locales should be returned.

        Note that `ScheduledRelease` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [Locale!]! = [en],
        stage: Stage! = PUBLISHED,
        where: ScheduledReleaseWhereUniqueInput!
    ): ScheduledRelease
    "Retrieve multiple scheduledReleases"
    scheduledReleases(
        after: String,
        before: String,
        first: Int,
        last: Int,
        """

        Defines which locales should be returned.

        Note that `ScheduledRelease` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [Locale!]! = [en],
        orderBy: ScheduledReleaseOrderByInput,
        skip: Int,
        stage: Stage! = PUBLISHED,
        where: ScheduledReleaseWhereInput
    ): [ScheduledRelease!]!
    "Retrieve multiple scheduledReleases using the Relay connection interface"
    scheduledReleasesConnection(
        after: String,
        before: String,
        first: Int,
        last: Int,
        """

        Defines which locales should be returned.

        Note that `ScheduledRelease` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [Locale!]! = [en],
        orderBy: ScheduledReleaseOrderByInput,
        skip: Int,
        stage: Stage! = PUBLISHED,
        where: ScheduledReleaseWhereInput
    ): ScheduledReleaseConnection!
    "Retrieve multiple subCategories"
    subCategories(
        after: String,
        before: String,
        first: Int,
        last: Int,
        """

        Defines which locales should be returned.

        Note that `SubCategory` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [Locale!]! = [en],
        orderBy: SubCategoryOrderByInput,
        skip: Int,
        stage: Stage! = PUBLISHED,
        where: SubCategoryWhereInput
    ): [SubCategory!]!
    "Retrieve multiple subCategories using the Relay connection interface"
    subCategoriesConnection(
        after: String,
        before: String,
        first: Int,
        last: Int,
        """

        Defines which locales should be returned.

        Note that `SubCategory` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [Locale!]! = [en],
        orderBy: SubCategoryOrderByInput,
        skip: Int,
        stage: Stage! = PUBLISHED,
        where: SubCategoryWhereInput
    ): SubCategoryConnection!
    "Retrieve a single subCategory"
    subCategory(
        """

        Defines which locales should be returned.

        Note that `SubCategory` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [Locale!]! = [en],
        stage: Stage! = PUBLISHED,
        where: SubCategoryWhereUniqueInput!
    ): SubCategory
    "Retrieve document version"
    subCategoryVersion(where: VersionWhereInput!): DocumentVersion
    "Retrieve a single user"
    user(
        """

        Defines which locales should be returned.

        Note that `User` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [Locale!]! = [en],
        stage: Stage! = PUBLISHED,
        where: UserWhereUniqueInput!
    ): User
    "Retrieve multiple users"
    users(
        after: String,
        before: String,
        first: Int,
        last: Int,
        """

        Defines which locales should be returned.

        Note that `User` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [Locale!]! = [en],
        orderBy: UserOrderByInput,
        skip: Int,
        stage: Stage! = PUBLISHED,
        where: UserWhereInput
    ): [User!]!
    "Retrieve multiple users using the Relay connection interface"
    usersConnection(
        after: String,
        before: String,
        first: Int,
        last: Int,
        """

        Defines which locales should be returned.

        Note that `User` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [Locale!]! = [en],
        orderBy: UserOrderByInput,
        skip: Int,
        stage: Stage! = PUBLISHED,
        where: UserWhereInput
    ): UserConnection!
}

"Representing a RGBA color value: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgb()_and_rgba()"
type RGBA {
    a: RGBATransparency!
    b: RGBAHue!
    g: RGBAHue!
    r: RGBAHue!
}

"Custom type representing a rich text value comprising of raw rich text ast, html, markdown and text values"
type RichText {
    "Returns HTMl representation"
    html: String!
    "Returns Markdown representation"
    markdown: String!
    "Returns AST representation"
    raw: RichTextAST!
    "Returns plain-text contents of RichText"
    text: String!
}

"Scheduled Operation system model"
type ScheduledOperation implements Node {
    affectedDocuments(
        after: String,
        before: String,
        first: Int,
        """

        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `affectedDocuments` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean,
        last: Int,
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `affectedDocuments` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!],
        skip: Int
    ): [ScheduledOperationAffectedDocument!]!
    "The time the document was created"
    createdAt: DateTime!
    "User that created this document"
    createdBy(
        """

        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `createdBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean,
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `createdBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
    ): User
    "Operation description"
    description: String
    "Get the document in other stages"
    documentInStages(
        "Decides if the current stage should be included or not"
        includeCurrent: Boolean! = false,
        "Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree"
        inheritLocale: Boolean! = false,
        "Potential stages that should be returned"
        stages: [Stage!]! = [DRAFT, PUBLISHED]
    ): [ScheduledOperation!]!
    "Operation error message"
    errorMessage: String
    "The unique identifier"
    id: ID!
    "The time the document was published. Null on documents in draft stage."
    publishedAt: DateTime
    "User that last published this document"
    publishedBy(
        """

        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `publishedBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean,
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `publishedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
    ): User
    "Raw operation payload including all details, this field is subject to change"
    rawPayload: Json!
    "The release this operation is scheduled for"
    release(
        """

        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `release` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean,
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `release` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
    ): ScheduledRelease
    "System stage field"
    stage: Stage!
    "operation Status"
    status: ScheduledOperationStatus!
    "The time the document was updated"
    updatedAt: DateTime!
    "User that last updated this document"
    updatedBy(
        """

        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `updatedBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean,
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `updatedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
    ): User
}

"A connection to a list of items."
type ScheduledOperationConnection {
    aggregate: Aggregate!
    "A list of edges."
    edges: [ScheduledOperationEdge!]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
}

"An edge in a connection."
type ScheduledOperationEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: ScheduledOperation!
}

"Scheduled Release system model"
type ScheduledRelease implements Node {
    "The time the document was created"
    createdAt: DateTime!
    "User that created this document"
    createdBy(
        """

        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `createdBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean,
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `createdBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
    ): User
    "Release description"
    description: String
    "Get the document in other stages"
    documentInStages(
        "Decides if the current stage should be included or not"
        includeCurrent: Boolean! = false,
        "Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree"
        inheritLocale: Boolean! = false,
        "Potential stages that should be returned"
        stages: [Stage!]! = [DRAFT, PUBLISHED]
    ): [ScheduledRelease!]!
    "Release error message"
    errorMessage: String
    "The unique identifier"
    id: ID!
    "Whether scheduled release should be run"
    isActive: Boolean!
    "Whether scheduled release is implicit"
    isImplicit: Boolean!
    "Operations to run with this release"
    operations(
        after: String,
        before: String,
        first: Int,
        """

        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `operations` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean,
        last: Int,
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `operations` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!],
        orderBy: ScheduledOperationOrderByInput,
        skip: Int,
        where: ScheduledOperationWhereInput
    ): [ScheduledOperation!]!
    "The time the document was published. Null on documents in draft stage."
    publishedAt: DateTime
    "User that last published this document"
    publishedBy(
        """

        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `publishedBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean,
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `publishedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
    ): User
    "Release date and time"
    releaseAt: DateTime
    "System stage field"
    stage: Stage!
    "Release Status"
    status: ScheduledReleaseStatus!
    "Release Title"
    title: String
    "The time the document was updated"
    updatedAt: DateTime!
    "User that last updated this document"
    updatedBy(
        """

        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `updatedBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean,
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `updatedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
    ): User
}

"A connection to a list of items."
type ScheduledReleaseConnection {
    aggregate: Aggregate!
    "A list of edges."
    edges: [ScheduledReleaseEdge!]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
}

"An edge in a connection."
type ScheduledReleaseEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: ScheduledRelease!
}

type SubCategory implements Node {
    "The time the document was created"
    createdAt: DateTime!
    "User that created this document"
    createdBy(
        """

        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `createdBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean,
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `createdBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
    ): User
    "Get the document in other stages"
    documentInStages(
        "Decides if the current stage should be included or not"
        includeCurrent: Boolean! = false,
        "Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree"
        inheritLocale: Boolean! = false,
        "Potential stages that should be returned"
        stages: [Stage!]! = [DRAFT, PUBLISHED]
    ): [SubCategory!]!
    files(
        after: String,
        before: String,
        first: Int,
        """

        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `files` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean,
        last: Int,
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `files` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!],
        orderBy: FileOrderByInput,
        skip: Int,
        where: FileWhereInput
    ): [File!]!
    "List of SubCategory versions"
    history(
        limit: Int! = 10,
        skip: Int! = 0,
        "This is optional and can be used to fetch the document version history for a specific stage instead of the current one"
        stageOverride: Stage
    ): [Version!]!
    "The unique identifier"
    id: ID!
    name: String!
    posts(
        after: String,
        before: String,
        first: Int,
        """

        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `posts` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean,
        last: Int,
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `posts` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!],
        orderBy: PostOrderByInput,
        skip: Int,
        where: PostWhereInput
    ): [Post!]!
    "The time the document was published. Null on documents in draft stage."
    publishedAt: DateTime
    "User that last published this document"
    publishedBy(
        """

        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `publishedBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean,
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `publishedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
    ): User
    scheduledIn(
        after: String,
        before: String,
        first: Int,
        """

        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `scheduledIn` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean,
        last: Int,
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `scheduledIn` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!],
        skip: Int,
        where: ScheduledOperationWhereInput
    ): [ScheduledOperation!]!
    slug: String!
    "System stage field"
    stage: Stage!
    "The time the document was updated"
    updatedAt: DateTime!
    "User that last updated this document"
    updatedBy(
        """

        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `updatedBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean,
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `updatedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
    ): User
}

"A connection to a list of items."
type SubCategoryConnection {
    aggregate: Aggregate!
    "A list of edges."
    edges: [SubCategoryEdge!]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
}

"An edge in a connection."
type SubCategoryEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: SubCategory!
}

"User system model"
type User implements Node {
    "The time the document was created"
    createdAt: DateTime!
    "Get the document in other stages"
    documentInStages(
        "Decides if the current stage should be included or not"
        includeCurrent: Boolean! = false,
        "Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree"
        inheritLocale: Boolean! = false,
        "Potential stages that should be returned"
        stages: [Stage!]! = [DRAFT, PUBLISHED]
    ): [User!]!
    "The unique identifier"
    id: ID!
    "Flag to determine if user is active or not"
    isActive: Boolean!
    "User Kind. Can be either MEMBER, PAT or PUBLIC"
    kind: UserKind!
    "The username"
    name: String!
    "Profile Picture url"
    picture: String
    "The time the document was published. Null on documents in draft stage."
    publishedAt: DateTime
    "System stage field"
    stage: Stage!
    "The time the document was updated"
    updatedAt: DateTime!
}

"A connection to a list of items."
type UserConnection {
    aggregate: Aggregate!
    "A list of edges."
    edges: [UserEdge!]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
}

"An edge in a connection."
type UserEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: User!
}

type Version {
    createdAt: DateTime!
    id: ID!
    revision: Int!
    stage: Stage!
}

enum AssetOrderByInput {
    createdAt_ASC
    createdAt_DESC
    fileName_ASC
    fileName_DESC
    handle_ASC
    handle_DESC
    height_ASC
    height_DESC
    id_ASC
    id_DESC
    mimeType_ASC
    mimeType_DESC
    publishedAt_ASC
    publishedAt_DESC
    size_ASC
    size_DESC
    updatedAt_ASC
    updatedAt_DESC
    width_ASC
    width_DESC
}

enum AuthorOrderByInput {
    bio_ASC
    bio_DESC
    createdAt_ASC
    createdAt_DESC
    id_ASC
    id_DESC
    name_ASC
    name_DESC
    pronouns_ASC
    pronouns_DESC
    publishedAt_ASC
    publishedAt_DESC
    updatedAt_ASC
    updatedAt_DESC
}

enum CategoryOrderByInput {
    createdAt_ASC
    createdAt_DESC
    id_ASC
    id_DESC
    name_ASC
    name_DESC
    publishedAt_ASC
    publishedAt_DESC
    slug_ASC
    slug_DESC
    updatedAt_ASC
    updatedAt_DESC
}

enum CommentOrderByInput {
    comment_ASC
    comment_DESC
    createdAt_ASC
    createdAt_DESC
    email_ASC
    email_DESC
    id_ASC
    id_DESC
    name_ASC
    name_DESC
    publishedAt_ASC
    publishedAt_DESC
    updatedAt_ASC
    updatedAt_DESC
}

enum DocumentFileTypes {
    doc
    docx
    html
    jpg
    odp
    ods
    odt
    pdf
    png
    ppt
    pptx
    svg
    txt
    webp
    xls
    xlsx
}

enum FileOrderByInput {
    accessCount_ASC
    accessCount_DESC
    author_ASC
    author_DESC
    createdAt_ASC
    createdAt_DESC
    description_ASC
    description_DESC
    id_ASC
    id_DESC
    mirrorUrl_ASC
    mirrorUrl_DESC
    name_ASC
    name_DESC
    publicationYear_ASC
    publicationYear_DESC
    publishedAt_ASC
    publishedAt_DESC
    slug_ASC
    slug_DESC
    updatedAt_ASC
    updatedAt_DESC
}

enum ImageFit {
    "Resizes the image to fit within the specified parameters without distorting, cropping, or changing the aspect ratio."
    clip
    "Resizes the image to fit the specified parameters exactly by removing any parts of the image that don't fit within the boundaries."
    crop
    "Resizes the image to fit within the parameters, but as opposed to 'fit:clip' will not scale the image if the image is smaller than the output size."
    max
    "Resizes the image to fit the specified parameters exactly by scaling the image to the desired size. The aspect ratio of the image is not respected and the image can be distorted using this method."
    scale
}

"Locale system enumeration"
enum Locale {
    "System locale"
    en
}

enum PostOrderByInput {
    createdAt_ASC
    createdAt_DESC
    excerpt_ASC
    excerpt_DESC
    featuredPost_ASC
    featuredPost_DESC
    id_ASC
    id_DESC
    publishedAt_ASC
    publishedAt_DESC
    slug_ASC
    slug_DESC
    title_ASC
    title_DESC
    updatedAt_ASC
    updatedAt_DESC
}

enum ScheduledOperationOrderByInput {
    createdAt_ASC
    createdAt_DESC
    description_ASC
    description_DESC
    errorMessage_ASC
    errorMessage_DESC
    id_ASC
    id_DESC
    publishedAt_ASC
    publishedAt_DESC
    status_ASC
    status_DESC
    updatedAt_ASC
    updatedAt_DESC
}

"System Scheduled Operation Status"
enum ScheduledOperationStatus {
    CANCELED
    COMPLETED
    FAILED
    IN_PROGRESS
    PENDING
}

enum ScheduledReleaseOrderByInput {
    createdAt_ASC
    createdAt_DESC
    description_ASC
    description_DESC
    errorMessage_ASC
    errorMessage_DESC
    id_ASC
    id_DESC
    isActive_ASC
    isActive_DESC
    isImplicit_ASC
    isImplicit_DESC
    publishedAt_ASC
    publishedAt_DESC
    releaseAt_ASC
    releaseAt_DESC
    status_ASC
    status_DESC
    title_ASC
    title_DESC
    updatedAt_ASC
    updatedAt_DESC
}

"System Scheduled Release Status"
enum ScheduledReleaseStatus {
    COMPLETED
    FAILED
    IN_PROGRESS
    PENDING
}

"Stage system enumeration"
enum Stage {
    "The Draft is the default stage for all your content."
    DRAFT
    "The Published stage is where you can publish your content to."
    PUBLISHED
}

enum SubCategoryOrderByInput {
    createdAt_ASC
    createdAt_DESC
    id_ASC
    id_DESC
    name_ASC
    name_DESC
    publishedAt_ASC
    publishedAt_DESC
    slug_ASC
    slug_DESC
    updatedAt_ASC
    updatedAt_DESC
}

enum SystemDateTimeFieldVariation {
    BASE
    COMBINED
    LOCALIZATION
}

"System User Kind"
enum UserKind {
    MEMBER
    PAT
    PUBLIC
    WEBHOOK
}

enum UserOrderByInput {
    createdAt_ASC
    createdAt_DESC
    id_ASC
    id_DESC
    isActive_ASC
    isActive_DESC
    kind_ASC
    kind_DESC
    name_ASC
    name_DESC
    picture_ASC
    picture_DESC
    publishedAt_ASC
    publishedAt_DESC
    updatedAt_ASC
    updatedAt_DESC
}

enum _FilterKind {
    AND
    NOT
    OR
    contains
    contains_all
    contains_none
    contains_some
    ends_with
    eq
    eq_not
    gt
    gte
    in
    lt
    lte
    not_contains
    not_ends_with
    not_in
    not_starts_with
    relational_every
    relational_none
    relational_single
    relational_some
    search
    starts_with
}

enum _MutationInputFieldKind {
    enum
    relation
    richText
    richTextWithEmbeds
    scalar
    union
    virtual
}

enum _MutationKind {
    create
    delete
    deleteMany
    publish
    publishMany
    schedulePublish
    scheduleUnpublish
    unpublish
    unpublishMany
    update
    updateMany
    upsert
}

enum _OrderDirection {
    asc
    desc
}

enum _RelationInputCardinality {
    many
    one
}

enum _RelationInputKind {
    create
    update
}

enum _RelationKind {
    regular
    union
}

enum _SystemDateTimeFieldVariation {
    base
    combined
    localization
}

"A date string, such as 2007-12-03 (YYYY-MM-DD), compliant with ISO 8601 standard for representation of dates using the Gregorian calendar."
scalar Date

"A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the date-timeformat outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representationof dates and times using the Gregorian calendar."
scalar DateTime

scalar Hex

"Raw JSON value"
scalar Json

"The Long scalar type represents non-fractional signed whole numeric values. Long can represent values between -(2^63) and 2^63 - 1."
scalar Long

scalar RGBAHue

scalar RGBATransparency

"Slate-compatible RichText AST"
scalar RichTextAST

input AssetConnectInput {
    "Allow to specify document position in list of connected documents, will default to appending at end of list"
    position: ConnectPositionInput
    "Document to connect"
    where: AssetWhereUniqueInput!
}

input AssetCreateInput {
    createdAt: DateTime
    featuredImagePost: PostCreateManyInlineInput
    fileName: String!
    handle: String!
    height: Float
    libraryFileFile: FileCreateManyInlineInput
    "Inline mutations for managing document localizations excluding the default locale"
    localizations: AssetCreateLocalizationsInput
    mimeType: String
    photoAuthor: AuthorCreateManyInlineInput
    size: Float
    updatedAt: DateTime
    width: Float
}

input AssetCreateLocalizationDataInput {
    createdAt: DateTime
    fileName: String!
    handle: String!
    height: Float
    mimeType: String
    size: Float
    updatedAt: DateTime
    width: Float
}

input AssetCreateLocalizationInput {
    "Localization input"
    data: AssetCreateLocalizationDataInput!
    locale: Locale!
}

input AssetCreateLocalizationsInput {
    "Create localizations for the newly-created document"
    create: [AssetCreateLocalizationInput!]
}

input AssetCreateManyInlineInput {
    "Connect multiple existing Asset documents"
    connect: [AssetWhereUniqueInput!]
    "Create and connect multiple existing Asset documents"
    create: [AssetCreateInput!]
}

input AssetCreateOneInlineInput {
    "Connect one existing Asset document"
    connect: AssetWhereUniqueInput
    "Create and connect one Asset document"
    create: AssetCreateInput
}

"Identifies documents"
input AssetManyWhereInput {
    "Logical AND on all given filters."
    AND: [AssetWhereInput!]
    "Logical NOT on all given filters combined by AND."
    NOT: [AssetWhereInput!]
    "Logical OR on all given filters."
    OR: [AssetWhereInput!]
    "Contains search across all appropriate fields."
    _search: String
    createdAt: DateTime
    "All values greater than the given value."
    createdAt_gt: DateTime
    "All values greater than or equal the given value."
    createdAt_gte: DateTime
    "All values that are contained in given list."
    createdAt_in: [DateTime]
    "All values less than the given value."
    createdAt_lt: DateTime
    "All values less than or equal the given value."
    createdAt_lte: DateTime
    "All values that are not equal to given value."
    createdAt_not: DateTime
    "All values that are not contained in given list."
    createdAt_not_in: [DateTime]
    createdBy: UserWhereInput
    documentInStages_every: AssetWhereStageInput
    documentInStages_none: AssetWhereStageInput
    documentInStages_some: AssetWhereStageInput
    featuredImagePost_every: PostWhereInput
    featuredImagePost_none: PostWhereInput
    featuredImagePost_some: PostWhereInput
    id: ID
    "All values containing the given string."
    id_contains: ID
    "All values ending with the given string."
    id_ends_with: ID
    "All values that are contained in given list."
    id_in: [ID]
    "All values that are not equal to given value."
    id_not: ID
    "All values not containing the given string."
    id_not_contains: ID
    "All values not ending with the given string"
    id_not_ends_with: ID
    "All values that are not contained in given list."
    id_not_in: [ID]
    "All values not starting with the given string."
    id_not_starts_with: ID
    "All values starting with the given string."
    id_starts_with: ID
    libraryFileFile_every: FileWhereInput
    libraryFileFile_none: FileWhereInput
    libraryFileFile_some: FileWhereInput
    photoAuthor_every: AuthorWhereInput
    photoAuthor_none: AuthorWhereInput
    photoAuthor_some: AuthorWhereInput
    publishedAt: DateTime
    "All values greater than the given value."
    publishedAt_gt: DateTime
    "All values greater than or equal the given value."
    publishedAt_gte: DateTime
    "All values that are contained in given list."
    publishedAt_in: [DateTime]
    "All values less than the given value."
    publishedAt_lt: DateTime
    "All values less than or equal the given value."
    publishedAt_lte: DateTime
    "All values that are not equal to given value."
    publishedAt_not: DateTime
    "All values that are not contained in given list."
    publishedAt_not_in: [DateTime]
    publishedBy: UserWhereInput
    scheduledIn_every: ScheduledOperationWhereInput
    scheduledIn_none: ScheduledOperationWhereInput
    scheduledIn_some: ScheduledOperationWhereInput
    updatedAt: DateTime
    "All values greater than the given value."
    updatedAt_gt: DateTime
    "All values greater than or equal the given value."
    updatedAt_gte: DateTime
    "All values that are contained in given list."
    updatedAt_in: [DateTime]
    "All values less than the given value."
    updatedAt_lt: DateTime
    "All values less than or equal the given value."
    updatedAt_lte: DateTime
    "All values that are not equal to given value."
    updatedAt_not: DateTime
    "All values that are not contained in given list."
    updatedAt_not_in: [DateTime]
    updatedBy: UserWhereInput
}

"Transformations for Assets"
input AssetTransformationInput {
    document: DocumentTransformationInput
    image: ImageTransformationInput
    "Pass true if you want to validate the passed transformation parameters"
    validateOptions: Boolean = false
}

input AssetUpdateInput {
    featuredImagePost: PostUpdateManyInlineInput
    fileName: String
    handle: String
    height: Float
    libraryFileFile: FileUpdateManyInlineInput
    "Manage document localizations"
    localizations: AssetUpdateLocalizationsInput
    mimeType: String
    photoAuthor: AuthorUpdateManyInlineInput
    size: Float
    width: Float
}

input AssetUpdateLocalizationDataInput {
    fileName: String
    handle: String
    height: Float
    mimeType: String
    size: Float
    width: Float
}

input AssetUpdateLocalizationInput {
    data: AssetUpdateLocalizationDataInput!
    locale: Locale!
}

input AssetUpdateLocalizationsInput {
    "Localizations to create"
    create: [AssetCreateLocalizationInput!]
    "Localizations to delete"
    delete: [Locale!]
    "Localizations to update"
    update: [AssetUpdateLocalizationInput!]
    upsert: [AssetUpsertLocalizationInput!]
}

input AssetUpdateManyInlineInput {
    "Connect multiple existing Asset documents"
    connect: [AssetConnectInput!]
    "Create and connect multiple Asset documents"
    create: [AssetCreateInput!]
    "Delete multiple Asset documents"
    delete: [AssetWhereUniqueInput!]
    "Disconnect multiple Asset documents"
    disconnect: [AssetWhereUniqueInput!]
    "Override currently-connected documents with multiple existing Asset documents"
    set: [AssetWhereUniqueInput!]
    "Update multiple Asset documents"
    update: [AssetUpdateWithNestedWhereUniqueInput!]
    "Upsert multiple Asset documents"
    upsert: [AssetUpsertWithNestedWhereUniqueInput!]
}

input AssetUpdateManyInput {
    fileName: String
    height: Float
    "Optional updates to localizations"
    localizations: AssetUpdateManyLocalizationsInput
    mimeType: String
    size: Float
    width: Float
}

input AssetUpdateManyLocalizationDataInput {
    fileName: String
    height: Float
    mimeType: String
    size: Float
    width: Float
}

input AssetUpdateManyLocalizationInput {
    data: AssetUpdateManyLocalizationDataInput!
    locale: Locale!
}

input AssetUpdateManyLocalizationsInput {
    "Localizations to update"
    update: [AssetUpdateManyLocalizationInput!]
}

input AssetUpdateManyWithNestedWhereInput {
    "Update many input"
    data: AssetUpdateManyInput!
    "Document search"
    where: AssetWhereInput!
}

input AssetUpdateOneInlineInput {
    "Connect existing Asset document"
    connect: AssetWhereUniqueInput
    "Create and connect one Asset document"
    create: AssetCreateInput
    "Delete currently connected Asset document"
    delete: Boolean
    "Disconnect currently connected Asset document"
    disconnect: Boolean
    "Update single Asset document"
    update: AssetUpdateWithNestedWhereUniqueInput
    "Upsert single Asset document"
    upsert: AssetUpsertWithNestedWhereUniqueInput
}

input AssetUpdateWithNestedWhereUniqueInput {
    "Document to update"
    data: AssetUpdateInput!
    "Unique document search"
    where: AssetWhereUniqueInput!
}

input AssetUpsertInput {
    "Create document if it didn't exist"
    create: AssetCreateInput!
    "Update document if it exists"
    update: AssetUpdateInput!
}

input AssetUpsertLocalizationInput {
    create: AssetCreateLocalizationDataInput!
    locale: Locale!
    update: AssetUpdateLocalizationDataInput!
}

input AssetUpsertWithNestedWhereUniqueInput {
    "Upsert data"
    data: AssetUpsertInput!
    "Unique document search"
    where: AssetWhereUniqueInput!
}

"This contains a set of filters that can be used to compare values internally"
input AssetWhereComparatorInput {
    "This field can be used to request to check if the entry is outdated by internal comparison"
    outdated_to: Boolean
}

"Identifies documents"
input AssetWhereInput {
    "Logical AND on all given filters."
    AND: [AssetWhereInput!]
    "Logical NOT on all given filters combined by AND."
    NOT: [AssetWhereInput!]
    "Logical OR on all given filters."
    OR: [AssetWhereInput!]
    "Contains search across all appropriate fields."
    _search: String
    createdAt: DateTime
    "All values greater than the given value."
    createdAt_gt: DateTime
    "All values greater than or equal the given value."
    createdAt_gte: DateTime
    "All values that are contained in given list."
    createdAt_in: [DateTime]
    "All values less than the given value."
    createdAt_lt: DateTime
    "All values less than or equal the given value."
    createdAt_lte: DateTime
    "All values that are not equal to given value."
    createdAt_not: DateTime
    "All values that are not contained in given list."
    createdAt_not_in: [DateTime]
    createdBy: UserWhereInput
    documentInStages_every: AssetWhereStageInput
    documentInStages_none: AssetWhereStageInput
    documentInStages_some: AssetWhereStageInput
    featuredImagePost_every: PostWhereInput
    featuredImagePost_none: PostWhereInput
    featuredImagePost_some: PostWhereInput
    fileName: String
    "All values containing the given string."
    fileName_contains: String
    "All values ending with the given string."
    fileName_ends_with: String
    "All values that are contained in given list."
    fileName_in: [String]
    "All values that are not equal to given value."
    fileName_not: String
    "All values not containing the given string."
    fileName_not_contains: String
    "All values not ending with the given string"
    fileName_not_ends_with: String
    "All values that are not contained in given list."
    fileName_not_in: [String]
    "All values not starting with the given string."
    fileName_not_starts_with: String
    "All values starting with the given string."
    fileName_starts_with: String
    handle: String
    "All values containing the given string."
    handle_contains: String
    "All values ending with the given string."
    handle_ends_with: String
    "All values that are contained in given list."
    handle_in: [String]
    "All values that are not equal to given value."
    handle_not: String
    "All values not containing the given string."
    handle_not_contains: String
    "All values not ending with the given string"
    handle_not_ends_with: String
    "All values that are not contained in given list."
    handle_not_in: [String]
    "All values not starting with the given string."
    handle_not_starts_with: String
    "All values starting with the given string."
    handle_starts_with: String
    height: Float
    "All values greater than the given value."
    height_gt: Float
    "All values greater than or equal the given value."
    height_gte: Float
    "All values that are contained in given list."
    height_in: [Float]
    "All values less than the given value."
    height_lt: Float
    "All values less than or equal the given value."
    height_lte: Float
    "All values that are not equal to given value."
    height_not: Float
    "All values that are not contained in given list."
    height_not_in: [Float]
    id: ID
    "All values containing the given string."
    id_contains: ID
    "All values ending with the given string."
    id_ends_with: ID
    "All values that are contained in given list."
    id_in: [ID]
    "All values that are not equal to given value."
    id_not: ID
    "All values not containing the given string."
    id_not_contains: ID
    "All values not ending with the given string"
    id_not_ends_with: ID
    "All values that are not contained in given list."
    id_not_in: [ID]
    "All values not starting with the given string."
    id_not_starts_with: ID
    "All values starting with the given string."
    id_starts_with: ID
    libraryFileFile_every: FileWhereInput
    libraryFileFile_none: FileWhereInput
    libraryFileFile_some: FileWhereInput
    mimeType: String
    "All values containing the given string."
    mimeType_contains: String
    "All values ending with the given string."
    mimeType_ends_with: String
    "All values that are contained in given list."
    mimeType_in: [String]
    "All values that are not equal to given value."
    mimeType_not: String
    "All values not containing the given string."
    mimeType_not_contains: String
    "All values not ending with the given string"
    mimeType_not_ends_with: String
    "All values that are not contained in given list."
    mimeType_not_in: [String]
    "All values not starting with the given string."
    mimeType_not_starts_with: String
    "All values starting with the given string."
    mimeType_starts_with: String
    photoAuthor_every: AuthorWhereInput
    photoAuthor_none: AuthorWhereInput
    photoAuthor_some: AuthorWhereInput
    publishedAt: DateTime
    "All values greater than the given value."
    publishedAt_gt: DateTime
    "All values greater than or equal the given value."
    publishedAt_gte: DateTime
    "All values that are contained in given list."
    publishedAt_in: [DateTime]
    "All values less than the given value."
    publishedAt_lt: DateTime
    "All values less than or equal the given value."
    publishedAt_lte: DateTime
    "All values that are not equal to given value."
    publishedAt_not: DateTime
    "All values that are not contained in given list."
    publishedAt_not_in: [DateTime]
    publishedBy: UserWhereInput
    scheduledIn_every: ScheduledOperationWhereInput
    scheduledIn_none: ScheduledOperationWhereInput
    scheduledIn_some: ScheduledOperationWhereInput
    size: Float
    "All values greater than the given value."
    size_gt: Float
    "All values greater than or equal the given value."
    size_gte: Float
    "All values that are contained in given list."
    size_in: [Float]
    "All values less than the given value."
    size_lt: Float
    "All values less than or equal the given value."
    size_lte: Float
    "All values that are not equal to given value."
    size_not: Float
    "All values that are not contained in given list."
    size_not_in: [Float]
    updatedAt: DateTime
    "All values greater than the given value."
    updatedAt_gt: DateTime
    "All values greater than or equal the given value."
    updatedAt_gte: DateTime
    "All values that are contained in given list."
    updatedAt_in: [DateTime]
    "All values less than the given value."
    updatedAt_lt: DateTime
    "All values less than or equal the given value."
    updatedAt_lte: DateTime
    "All values that are not equal to given value."
    updatedAt_not: DateTime
    "All values that are not contained in given list."
    updatedAt_not_in: [DateTime]
    updatedBy: UserWhereInput
    width: Float
    "All values greater than the given value."
    width_gt: Float
    "All values greater than or equal the given value."
    width_gte: Float
    "All values that are contained in given list."
    width_in: [Float]
    "All values less than the given value."
    width_lt: Float
    "All values less than or equal the given value."
    width_lte: Float
    "All values that are not equal to given value."
    width_not: Float
    "All values that are not contained in given list."
    width_not_in: [Float]
}

"The document in stages filter allows specifying a stage entry to cross compare the same document between different stages"
input AssetWhereStageInput {
    "Logical AND on all given filters."
    AND: [AssetWhereStageInput!]
    "Logical NOT on all given filters combined by AND."
    NOT: [AssetWhereStageInput!]
    "Logical OR on all given filters."
    OR: [AssetWhereStageInput!]
    "This field contains fields which can be set as true or false to specify an internal comparison"
    compareWithParent: AssetWhereComparatorInput
    "Specify the stage to compare with"
    stage: Stage
}

"References Asset record uniquely"
input AssetWhereUniqueInput {
    id: ID
}

input AuthorConnectInput {
    "Allow to specify document position in list of connected documents, will default to appending at end of list"
    position: ConnectPositionInput
    "Document to connect"
    where: AuthorWhereUniqueInput!
}

input AuthorCreateInput {
    "bio input for default locale (en)"
    bio: String
    createdAt: DateTime
    "Inline mutations for managing document localizations excluding the default locale"
    localizations: AuthorCreateLocalizationsInput
    name: String!
    photo: AssetCreateOneInlineInput
    posts: PostCreateManyInlineInput
    "pronouns input for default locale (en)"
    pronouns: String!
    updatedAt: DateTime
}

input AuthorCreateLocalizationDataInput {
    bio: String
    createdAt: DateTime
    pronouns: String!
    updatedAt: DateTime
}

input AuthorCreateLocalizationInput {
    "Localization input"
    data: AuthorCreateLocalizationDataInput!
    locale: Locale!
}

input AuthorCreateLocalizationsInput {
    "Create localizations for the newly-created document"
    create: [AuthorCreateLocalizationInput!]
}

input AuthorCreateManyInlineInput {
    "Connect multiple existing Author documents"
    connect: [AuthorWhereUniqueInput!]
    "Create and connect multiple existing Author documents"
    create: [AuthorCreateInput!]
}

input AuthorCreateOneInlineInput {
    "Connect one existing Author document"
    connect: AuthorWhereUniqueInput
    "Create and connect one Author document"
    create: AuthorCreateInput
}

"Identifies documents"
input AuthorManyWhereInput {
    "Logical AND on all given filters."
    AND: [AuthorWhereInput!]
    "Logical NOT on all given filters combined by AND."
    NOT: [AuthorWhereInput!]
    "Logical OR on all given filters."
    OR: [AuthorWhereInput!]
    "Contains search across all appropriate fields."
    _search: String
    createdAt: DateTime
    "All values greater than the given value."
    createdAt_gt: DateTime
    "All values greater than or equal the given value."
    createdAt_gte: DateTime
    "All values that are contained in given list."
    createdAt_in: [DateTime]
    "All values less than the given value."
    createdAt_lt: DateTime
    "All values less than or equal the given value."
    createdAt_lte: DateTime
    "All values that are not equal to given value."
    createdAt_not: DateTime
    "All values that are not contained in given list."
    createdAt_not_in: [DateTime]
    createdBy: UserWhereInput
    documentInStages_every: AuthorWhereStageInput
    documentInStages_none: AuthorWhereStageInput
    documentInStages_some: AuthorWhereStageInput
    id: ID
    "All values containing the given string."
    id_contains: ID
    "All values ending with the given string."
    id_ends_with: ID
    "All values that are contained in given list."
    id_in: [ID]
    "All values that are not equal to given value."
    id_not: ID
    "All values not containing the given string."
    id_not_contains: ID
    "All values not ending with the given string"
    id_not_ends_with: ID
    "All values that are not contained in given list."
    id_not_in: [ID]
    "All values not starting with the given string."
    id_not_starts_with: ID
    "All values starting with the given string."
    id_starts_with: ID
    name: String
    "All values containing the given string."
    name_contains: String
    "All values ending with the given string."
    name_ends_with: String
    "All values that are contained in given list."
    name_in: [String]
    "All values that are not equal to given value."
    name_not: String
    "All values not containing the given string."
    name_not_contains: String
    "All values not ending with the given string"
    name_not_ends_with: String
    "All values that are not contained in given list."
    name_not_in: [String]
    "All values not starting with the given string."
    name_not_starts_with: String
    "All values starting with the given string."
    name_starts_with: String
    photo: AssetWhereInput
    posts_every: PostWhereInput
    posts_none: PostWhereInput
    posts_some: PostWhereInput
    publishedAt: DateTime
    "All values greater than the given value."
    publishedAt_gt: DateTime
    "All values greater than or equal the given value."
    publishedAt_gte: DateTime
    "All values that are contained in given list."
    publishedAt_in: [DateTime]
    "All values less than the given value."
    publishedAt_lt: DateTime
    "All values less than or equal the given value."
    publishedAt_lte: DateTime
    "All values that are not equal to given value."
    publishedAt_not: DateTime
    "All values that are not contained in given list."
    publishedAt_not_in: [DateTime]
    publishedBy: UserWhereInput
    scheduledIn_every: ScheduledOperationWhereInput
    scheduledIn_none: ScheduledOperationWhereInput
    scheduledIn_some: ScheduledOperationWhereInput
    updatedAt: DateTime
    "All values greater than the given value."
    updatedAt_gt: DateTime
    "All values greater than or equal the given value."
    updatedAt_gte: DateTime
    "All values that are contained in given list."
    updatedAt_in: [DateTime]
    "All values less than the given value."
    updatedAt_lt: DateTime
    "All values less than or equal the given value."
    updatedAt_lte: DateTime
    "All values that are not equal to given value."
    updatedAt_not: DateTime
    "All values that are not contained in given list."
    updatedAt_not_in: [DateTime]
    updatedBy: UserWhereInput
}

input AuthorUpdateInput {
    "bio input for default locale (en)"
    bio: String
    "Manage document localizations"
    localizations: AuthorUpdateLocalizationsInput
    name: String
    photo: AssetUpdateOneInlineInput
    posts: PostUpdateManyInlineInput
    "pronouns input for default locale (en)"
    pronouns: String
}

input AuthorUpdateLocalizationDataInput {
    bio: String
    pronouns: String
}

input AuthorUpdateLocalizationInput {
    data: AuthorUpdateLocalizationDataInput!
    locale: Locale!
}

input AuthorUpdateLocalizationsInput {
    "Localizations to create"
    create: [AuthorCreateLocalizationInput!]
    "Localizations to delete"
    delete: [Locale!]
    "Localizations to update"
    update: [AuthorUpdateLocalizationInput!]
    upsert: [AuthorUpsertLocalizationInput!]
}

input AuthorUpdateManyInlineInput {
    "Connect multiple existing Author documents"
    connect: [AuthorConnectInput!]
    "Create and connect multiple Author documents"
    create: [AuthorCreateInput!]
    "Delete multiple Author documents"
    delete: [AuthorWhereUniqueInput!]
    "Disconnect multiple Author documents"
    disconnect: [AuthorWhereUniqueInput!]
    "Override currently-connected documents with multiple existing Author documents"
    set: [AuthorWhereUniqueInput!]
    "Update multiple Author documents"
    update: [AuthorUpdateWithNestedWhereUniqueInput!]
    "Upsert multiple Author documents"
    upsert: [AuthorUpsertWithNestedWhereUniqueInput!]
}

input AuthorUpdateManyInput {
    "bio input for default locale (en)"
    bio: String
    "Optional updates to localizations"
    localizations: AuthorUpdateManyLocalizationsInput
    name: String
    "pronouns input for default locale (en)"
    pronouns: String
}

input AuthorUpdateManyLocalizationDataInput {
    bio: String
    pronouns: String
}

input AuthorUpdateManyLocalizationInput {
    data: AuthorUpdateManyLocalizationDataInput!
    locale: Locale!
}

input AuthorUpdateManyLocalizationsInput {
    "Localizations to update"
    update: [AuthorUpdateManyLocalizationInput!]
}

input AuthorUpdateManyWithNestedWhereInput {
    "Update many input"
    data: AuthorUpdateManyInput!
    "Document search"
    where: AuthorWhereInput!
}

input AuthorUpdateOneInlineInput {
    "Connect existing Author document"
    connect: AuthorWhereUniqueInput
    "Create and connect one Author document"
    create: AuthorCreateInput
    "Delete currently connected Author document"
    delete: Boolean
    "Disconnect currently connected Author document"
    disconnect: Boolean
    "Update single Author document"
    update: AuthorUpdateWithNestedWhereUniqueInput
    "Upsert single Author document"
    upsert: AuthorUpsertWithNestedWhereUniqueInput
}

input AuthorUpdateWithNestedWhereUniqueInput {
    "Document to update"
    data: AuthorUpdateInput!
    "Unique document search"
    where: AuthorWhereUniqueInput!
}

input AuthorUpsertInput {
    "Create document if it didn't exist"
    create: AuthorCreateInput!
    "Update document if it exists"
    update: AuthorUpdateInput!
}

input AuthorUpsertLocalizationInput {
    create: AuthorCreateLocalizationDataInput!
    locale: Locale!
    update: AuthorUpdateLocalizationDataInput!
}

input AuthorUpsertWithNestedWhereUniqueInput {
    "Upsert data"
    data: AuthorUpsertInput!
    "Unique document search"
    where: AuthorWhereUniqueInput!
}

"This contains a set of filters that can be used to compare values internally"
input AuthorWhereComparatorInput {
    "This field can be used to request to check if the entry is outdated by internal comparison"
    outdated_to: Boolean
}

"Identifies documents"
input AuthorWhereInput {
    "Logical AND on all given filters."
    AND: [AuthorWhereInput!]
    "Logical NOT on all given filters combined by AND."
    NOT: [AuthorWhereInput!]
    "Logical OR on all given filters."
    OR: [AuthorWhereInput!]
    "Contains search across all appropriate fields."
    _search: String
    bio: String
    "All values containing the given string."
    bio_contains: String
    "All values ending with the given string."
    bio_ends_with: String
    "All values that are contained in given list."
    bio_in: [String]
    "All values that are not equal to given value."
    bio_not: String
    "All values not containing the given string."
    bio_not_contains: String
    "All values not ending with the given string"
    bio_not_ends_with: String
    "All values that are not contained in given list."
    bio_not_in: [String]
    "All values not starting with the given string."
    bio_not_starts_with: String
    "All values starting with the given string."
    bio_starts_with: String
    createdAt: DateTime
    "All values greater than the given value."
    createdAt_gt: DateTime
    "All values greater than or equal the given value."
    createdAt_gte: DateTime
    "All values that are contained in given list."
    createdAt_in: [DateTime]
    "All values less than the given value."
    createdAt_lt: DateTime
    "All values less than or equal the given value."
    createdAt_lte: DateTime
    "All values that are not equal to given value."
    createdAt_not: DateTime
    "All values that are not contained in given list."
    createdAt_not_in: [DateTime]
    createdBy: UserWhereInput
    documentInStages_every: AuthorWhereStageInput
    documentInStages_none: AuthorWhereStageInput
    documentInStages_some: AuthorWhereStageInput
    id: ID
    "All values containing the given string."
    id_contains: ID
    "All values ending with the given string."
    id_ends_with: ID
    "All values that are contained in given list."
    id_in: [ID]
    "All values that are not equal to given value."
    id_not: ID
    "All values not containing the given string."
    id_not_contains: ID
    "All values not ending with the given string"
    id_not_ends_with: ID
    "All values that are not contained in given list."
    id_not_in: [ID]
    "All values not starting with the given string."
    id_not_starts_with: ID
    "All values starting with the given string."
    id_starts_with: ID
    name: String
    "All values containing the given string."
    name_contains: String
    "All values ending with the given string."
    name_ends_with: String
    "All values that are contained in given list."
    name_in: [String]
    "All values that are not equal to given value."
    name_not: String
    "All values not containing the given string."
    name_not_contains: String
    "All values not ending with the given string"
    name_not_ends_with: String
    "All values that are not contained in given list."
    name_not_in: [String]
    "All values not starting with the given string."
    name_not_starts_with: String
    "All values starting with the given string."
    name_starts_with: String
    photo: AssetWhereInput
    posts_every: PostWhereInput
    posts_none: PostWhereInput
    posts_some: PostWhereInput
    pronouns: String
    "All values containing the given string."
    pronouns_contains: String
    "All values ending with the given string."
    pronouns_ends_with: String
    "All values that are contained in given list."
    pronouns_in: [String]
    "All values that are not equal to given value."
    pronouns_not: String
    "All values not containing the given string."
    pronouns_not_contains: String
    "All values not ending with the given string"
    pronouns_not_ends_with: String
    "All values that are not contained in given list."
    pronouns_not_in: [String]
    "All values not starting with the given string."
    pronouns_not_starts_with: String
    "All values starting with the given string."
    pronouns_starts_with: String
    publishedAt: DateTime
    "All values greater than the given value."
    publishedAt_gt: DateTime
    "All values greater than or equal the given value."
    publishedAt_gte: DateTime
    "All values that are contained in given list."
    publishedAt_in: [DateTime]
    "All values less than the given value."
    publishedAt_lt: DateTime
    "All values less than or equal the given value."
    publishedAt_lte: DateTime
    "All values that are not equal to given value."
    publishedAt_not: DateTime
    "All values that are not contained in given list."
    publishedAt_not_in: [DateTime]
    publishedBy: UserWhereInput
    scheduledIn_every: ScheduledOperationWhereInput
    scheduledIn_none: ScheduledOperationWhereInput
    scheduledIn_some: ScheduledOperationWhereInput
    updatedAt: DateTime
    "All values greater than the given value."
    updatedAt_gt: DateTime
    "All values greater than or equal the given value."
    updatedAt_gte: DateTime
    "All values that are contained in given list."
    updatedAt_in: [DateTime]
    "All values less than the given value."
    updatedAt_lt: DateTime
    "All values less than or equal the given value."
    updatedAt_lte: DateTime
    "All values that are not equal to given value."
    updatedAt_not: DateTime
    "All values that are not contained in given list."
    updatedAt_not_in: [DateTime]
    updatedBy: UserWhereInput
}

"The document in stages filter allows specifying a stage entry to cross compare the same document between different stages"
input AuthorWhereStageInput {
    "Logical AND on all given filters."
    AND: [AuthorWhereStageInput!]
    "Logical NOT on all given filters combined by AND."
    NOT: [AuthorWhereStageInput!]
    "Logical OR on all given filters."
    OR: [AuthorWhereStageInput!]
    "This field contains fields which can be set as true or false to specify an internal comparison"
    compareWithParent: AuthorWhereComparatorInput
    "Specify the stage to compare with"
    stage: Stage
}

"References Author record uniquely"
input AuthorWhereUniqueInput {
    id: ID
}

input CategoryConnectInput {
    "Allow to specify document position in list of connected documents, will default to appending at end of list"
    position: ConnectPositionInput
    "Document to connect"
    where: CategoryWhereUniqueInput!
}

input CategoryCreateInput {
    createdAt: DateTime
    files: FileCreateManyInlineInput
    name: String!
    posts: PostCreateManyInlineInput
    slug: String!
    updatedAt: DateTime
}

input CategoryCreateManyInlineInput {
    "Connect multiple existing Category documents"
    connect: [CategoryWhereUniqueInput!]
    "Create and connect multiple existing Category documents"
    create: [CategoryCreateInput!]
}

input CategoryCreateOneInlineInput {
    "Connect one existing Category document"
    connect: CategoryWhereUniqueInput
    "Create and connect one Category document"
    create: CategoryCreateInput
}

"Identifies documents"
input CategoryManyWhereInput {
    "Logical AND on all given filters."
    AND: [CategoryWhereInput!]
    "Logical NOT on all given filters combined by AND."
    NOT: [CategoryWhereInput!]
    "Logical OR on all given filters."
    OR: [CategoryWhereInput!]
    "Contains search across all appropriate fields."
    _search: String
    createdAt: DateTime
    "All values greater than the given value."
    createdAt_gt: DateTime
    "All values greater than or equal the given value."
    createdAt_gte: DateTime
    "All values that are contained in given list."
    createdAt_in: [DateTime]
    "All values less than the given value."
    createdAt_lt: DateTime
    "All values less than or equal the given value."
    createdAt_lte: DateTime
    "All values that are not equal to given value."
    createdAt_not: DateTime
    "All values that are not contained in given list."
    createdAt_not_in: [DateTime]
    createdBy: UserWhereInput
    documentInStages_every: CategoryWhereStageInput
    documentInStages_none: CategoryWhereStageInput
    documentInStages_some: CategoryWhereStageInput
    files_every: FileWhereInput
    files_none: FileWhereInput
    files_some: FileWhereInput
    id: ID
    "All values containing the given string."
    id_contains: ID
    "All values ending with the given string."
    id_ends_with: ID
    "All values that are contained in given list."
    id_in: [ID]
    "All values that are not equal to given value."
    id_not: ID
    "All values not containing the given string."
    id_not_contains: ID
    "All values not ending with the given string"
    id_not_ends_with: ID
    "All values that are not contained in given list."
    id_not_in: [ID]
    "All values not starting with the given string."
    id_not_starts_with: ID
    "All values starting with the given string."
    id_starts_with: ID
    name: String
    "All values containing the given string."
    name_contains: String
    "All values ending with the given string."
    name_ends_with: String
    "All values that are contained in given list."
    name_in: [String]
    "All values that are not equal to given value."
    name_not: String
    "All values not containing the given string."
    name_not_contains: String
    "All values not ending with the given string"
    name_not_ends_with: String
    "All values that are not contained in given list."
    name_not_in: [String]
    "All values not starting with the given string."
    name_not_starts_with: String
    "All values starting with the given string."
    name_starts_with: String
    posts_every: PostWhereInput
    posts_none: PostWhereInput
    posts_some: PostWhereInput
    publishedAt: DateTime
    "All values greater than the given value."
    publishedAt_gt: DateTime
    "All values greater than or equal the given value."
    publishedAt_gte: DateTime
    "All values that are contained in given list."
    publishedAt_in: [DateTime]
    "All values less than the given value."
    publishedAt_lt: DateTime
    "All values less than or equal the given value."
    publishedAt_lte: DateTime
    "All values that are not equal to given value."
    publishedAt_not: DateTime
    "All values that are not contained in given list."
    publishedAt_not_in: [DateTime]
    publishedBy: UserWhereInput
    scheduledIn_every: ScheduledOperationWhereInput
    scheduledIn_none: ScheduledOperationWhereInput
    scheduledIn_some: ScheduledOperationWhereInput
    slug: String
    "All values containing the given string."
    slug_contains: String
    "All values ending with the given string."
    slug_ends_with: String
    "All values that are contained in given list."
    slug_in: [String]
    "All values that are not equal to given value."
    slug_not: String
    "All values not containing the given string."
    slug_not_contains: String
    "All values not ending with the given string"
    slug_not_ends_with: String
    "All values that are not contained in given list."
    slug_not_in: [String]
    "All values not starting with the given string."
    slug_not_starts_with: String
    "All values starting with the given string."
    slug_starts_with: String
    updatedAt: DateTime
    "All values greater than the given value."
    updatedAt_gt: DateTime
    "All values greater than or equal the given value."
    updatedAt_gte: DateTime
    "All values that are contained in given list."
    updatedAt_in: [DateTime]
    "All values less than the given value."
    updatedAt_lt: DateTime
    "All values less than or equal the given value."
    updatedAt_lte: DateTime
    "All values that are not equal to given value."
    updatedAt_not: DateTime
    "All values that are not contained in given list."
    updatedAt_not_in: [DateTime]
    updatedBy: UserWhereInput
}

input CategoryUpdateInput {
    files: FileUpdateManyInlineInput
    name: String
    posts: PostUpdateManyInlineInput
    slug: String
}

input CategoryUpdateManyInlineInput {
    "Connect multiple existing Category documents"
    connect: [CategoryConnectInput!]
    "Create and connect multiple Category documents"
    create: [CategoryCreateInput!]
    "Delete multiple Category documents"
    delete: [CategoryWhereUniqueInput!]
    "Disconnect multiple Category documents"
    disconnect: [CategoryWhereUniqueInput!]
    "Override currently-connected documents with multiple existing Category documents"
    set: [CategoryWhereUniqueInput!]
    "Update multiple Category documents"
    update: [CategoryUpdateWithNestedWhereUniqueInput!]
    "Upsert multiple Category documents"
    upsert: [CategoryUpsertWithNestedWhereUniqueInput!]
}

input CategoryUpdateManyInput {
    "No fields in updateMany data input"
    _: String
}

input CategoryUpdateManyWithNestedWhereInput {
    "Update many input"
    data: CategoryUpdateManyInput!
    "Document search"
    where: CategoryWhereInput!
}

input CategoryUpdateOneInlineInput {
    "Connect existing Category document"
    connect: CategoryWhereUniqueInput
    "Create and connect one Category document"
    create: CategoryCreateInput
    "Delete currently connected Category document"
    delete: Boolean
    "Disconnect currently connected Category document"
    disconnect: Boolean
    "Update single Category document"
    update: CategoryUpdateWithNestedWhereUniqueInput
    "Upsert single Category document"
    upsert: CategoryUpsertWithNestedWhereUniqueInput
}

input CategoryUpdateWithNestedWhereUniqueInput {
    "Document to update"
    data: CategoryUpdateInput!
    "Unique document search"
    where: CategoryWhereUniqueInput!
}

input CategoryUpsertInput {
    "Create document if it didn't exist"
    create: CategoryCreateInput!
    "Update document if it exists"
    update: CategoryUpdateInput!
}

input CategoryUpsertWithNestedWhereUniqueInput {
    "Upsert data"
    data: CategoryUpsertInput!
    "Unique document search"
    where: CategoryWhereUniqueInput!
}

"This contains a set of filters that can be used to compare values internally"
input CategoryWhereComparatorInput {
    "This field can be used to request to check if the entry is outdated by internal comparison"
    outdated_to: Boolean
}

"Identifies documents"
input CategoryWhereInput {
    "Logical AND on all given filters."
    AND: [CategoryWhereInput!]
    "Logical NOT on all given filters combined by AND."
    NOT: [CategoryWhereInput!]
    "Logical OR on all given filters."
    OR: [CategoryWhereInput!]
    "Contains search across all appropriate fields."
    _search: String
    createdAt: DateTime
    "All values greater than the given value."
    createdAt_gt: DateTime
    "All values greater than or equal the given value."
    createdAt_gte: DateTime
    "All values that are contained in given list."
    createdAt_in: [DateTime]
    "All values less than the given value."
    createdAt_lt: DateTime
    "All values less than or equal the given value."
    createdAt_lte: DateTime
    "All values that are not equal to given value."
    createdAt_not: DateTime
    "All values that are not contained in given list."
    createdAt_not_in: [DateTime]
    createdBy: UserWhereInput
    documentInStages_every: CategoryWhereStageInput
    documentInStages_none: CategoryWhereStageInput
    documentInStages_some: CategoryWhereStageInput
    files_every: FileWhereInput
    files_none: FileWhereInput
    files_some: FileWhereInput
    id: ID
    "All values containing the given string."
    id_contains: ID
    "All values ending with the given string."
    id_ends_with: ID
    "All values that are contained in given list."
    id_in: [ID]
    "All values that are not equal to given value."
    id_not: ID
    "All values not containing the given string."
    id_not_contains: ID
    "All values not ending with the given string"
    id_not_ends_with: ID
    "All values that are not contained in given list."
    id_not_in: [ID]
    "All values not starting with the given string."
    id_not_starts_with: ID
    "All values starting with the given string."
    id_starts_with: ID
    name: String
    "All values containing the given string."
    name_contains: String
    "All values ending with the given string."
    name_ends_with: String
    "All values that are contained in given list."
    name_in: [String]
    "All values that are not equal to given value."
    name_not: String
    "All values not containing the given string."
    name_not_contains: String
    "All values not ending with the given string"
    name_not_ends_with: String
    "All values that are not contained in given list."
    name_not_in: [String]
    "All values not starting with the given string."
    name_not_starts_with: String
    "All values starting with the given string."
    name_starts_with: String
    posts_every: PostWhereInput
    posts_none: PostWhereInput
    posts_some: PostWhereInput
    publishedAt: DateTime
    "All values greater than the given value."
    publishedAt_gt: DateTime
    "All values greater than or equal the given value."
    publishedAt_gte: DateTime
    "All values that are contained in given list."
    publishedAt_in: [DateTime]
    "All values less than the given value."
    publishedAt_lt: DateTime
    "All values less than or equal the given value."
    publishedAt_lte: DateTime
    "All values that are not equal to given value."
    publishedAt_not: DateTime
    "All values that are not contained in given list."
    publishedAt_not_in: [DateTime]
    publishedBy: UserWhereInput
    scheduledIn_every: ScheduledOperationWhereInput
    scheduledIn_none: ScheduledOperationWhereInput
    scheduledIn_some: ScheduledOperationWhereInput
    slug: String
    "All values containing the given string."
    slug_contains: String
    "All values ending with the given string."
    slug_ends_with: String
    "All values that are contained in given list."
    slug_in: [String]
    "All values that are not equal to given value."
    slug_not: String
    "All values not containing the given string."
    slug_not_contains: String
    "All values not ending with the given string"
    slug_not_ends_with: String
    "All values that are not contained in given list."
    slug_not_in: [String]
    "All values not starting with the given string."
    slug_not_starts_with: String
    "All values starting with the given string."
    slug_starts_with: String
    updatedAt: DateTime
    "All values greater than the given value."
    updatedAt_gt: DateTime
    "All values greater than or equal the given value."
    updatedAt_gte: DateTime
    "All values that are contained in given list."
    updatedAt_in: [DateTime]
    "All values less than the given value."
    updatedAt_lt: DateTime
    "All values less than or equal the given value."
    updatedAt_lte: DateTime
    "All values that are not equal to given value."
    updatedAt_not: DateTime
    "All values that are not contained in given list."
    updatedAt_not_in: [DateTime]
    updatedBy: UserWhereInput
}

"The document in stages filter allows specifying a stage entry to cross compare the same document between different stages"
input CategoryWhereStageInput {
    "Logical AND on all given filters."
    AND: [CategoryWhereStageInput!]
    "Logical NOT on all given filters combined by AND."
    NOT: [CategoryWhereStageInput!]
    "Logical OR on all given filters."
    OR: [CategoryWhereStageInput!]
    "This field contains fields which can be set as true or false to specify an internal comparison"
    compareWithParent: CategoryWhereComparatorInput
    "Specify the stage to compare with"
    stage: Stage
}

"References Category record uniquely"
input CategoryWhereUniqueInput {
    id: ID
    name: String
    slug: String
}

"Accepts either HEX or RGBA color value. At least one of hex or rgba value should be passed. If both are passed RGBA is used."
input ColorInput {
    hex: Hex
    rgba: RGBAInput
}

input CommentConnectInput {
    "Allow to specify document position in list of connected documents, will default to appending at end of list"
    position: ConnectPositionInput
    "Document to connect"
    where: CommentWhereUniqueInput!
}

input CommentCreateInput {
    comment: String!
    createdAt: DateTime
    email: String!
    name: String!
    post: PostCreateOneInlineInput
    updatedAt: DateTime
}

input CommentCreateManyInlineInput {
    "Connect multiple existing Comment documents"
    connect: [CommentWhereUniqueInput!]
    "Create and connect multiple existing Comment documents"
    create: [CommentCreateInput!]
}

input CommentCreateOneInlineInput {
    "Connect one existing Comment document"
    connect: CommentWhereUniqueInput
    "Create and connect one Comment document"
    create: CommentCreateInput
}

"Identifies documents"
input CommentManyWhereInput {
    "Logical AND on all given filters."
    AND: [CommentWhereInput!]
    "Logical NOT on all given filters combined by AND."
    NOT: [CommentWhereInput!]
    "Logical OR on all given filters."
    OR: [CommentWhereInput!]
    "Contains search across all appropriate fields."
    _search: String
    comment: String
    "All values containing the given string."
    comment_contains: String
    "All values ending with the given string."
    comment_ends_with: String
    "All values that are contained in given list."
    comment_in: [String]
    "All values that are not equal to given value."
    comment_not: String
    "All values not containing the given string."
    comment_not_contains: String
    "All values not ending with the given string"
    comment_not_ends_with: String
    "All values that are not contained in given list."
    comment_not_in: [String]
    "All values not starting with the given string."
    comment_not_starts_with: String
    "All values starting with the given string."
    comment_starts_with: String
    createdAt: DateTime
    "All values greater than the given value."
    createdAt_gt: DateTime
    "All values greater than or equal the given value."
    createdAt_gte: DateTime
    "All values that are contained in given list."
    createdAt_in: [DateTime]
    "All values less than the given value."
    createdAt_lt: DateTime
    "All values less than or equal the given value."
    createdAt_lte: DateTime
    "All values that are not equal to given value."
    createdAt_not: DateTime
    "All values that are not contained in given list."
    createdAt_not_in: [DateTime]
    createdBy: UserWhereInput
    documentInStages_every: CommentWhereStageInput
    documentInStages_none: CommentWhereStageInput
    documentInStages_some: CommentWhereStageInput
    email: String
    "All values containing the given string."
    email_contains: String
    "All values ending with the given string."
    email_ends_with: String
    "All values that are contained in given list."
    email_in: [String]
    "All values that are not equal to given value."
    email_not: String
    "All values not containing the given string."
    email_not_contains: String
    "All values not ending with the given string"
    email_not_ends_with: String
    "All values that are not contained in given list."
    email_not_in: [String]
    "All values not starting with the given string."
    email_not_starts_with: String
    "All values starting with the given string."
    email_starts_with: String
    id: ID
    "All values containing the given string."
    id_contains: ID
    "All values ending with the given string."
    id_ends_with: ID
    "All values that are contained in given list."
    id_in: [ID]
    "All values that are not equal to given value."
    id_not: ID
    "All values not containing the given string."
    id_not_contains: ID
    "All values not ending with the given string"
    id_not_ends_with: ID
    "All values that are not contained in given list."
    id_not_in: [ID]
    "All values not starting with the given string."
    id_not_starts_with: ID
    "All values starting with the given string."
    id_starts_with: ID
    name: String
    "All values containing the given string."
    name_contains: String
    "All values ending with the given string."
    name_ends_with: String
    "All values that are contained in given list."
    name_in: [String]
    "All values that are not equal to given value."
    name_not: String
    "All values not containing the given string."
    name_not_contains: String
    "All values not ending with the given string"
    name_not_ends_with: String
    "All values that are not contained in given list."
    name_not_in: [String]
    "All values not starting with the given string."
    name_not_starts_with: String
    "All values starting with the given string."
    name_starts_with: String
    post: PostWhereInput
    publishedAt: DateTime
    "All values greater than the given value."
    publishedAt_gt: DateTime
    "All values greater than or equal the given value."
    publishedAt_gte: DateTime
    "All values that are contained in given list."
    publishedAt_in: [DateTime]
    "All values less than the given value."
    publishedAt_lt: DateTime
    "All values less than or equal the given value."
    publishedAt_lte: DateTime
    "All values that are not equal to given value."
    publishedAt_not: DateTime
    "All values that are not contained in given list."
    publishedAt_not_in: [DateTime]
    publishedBy: UserWhereInput
    scheduledIn_every: ScheduledOperationWhereInput
    scheduledIn_none: ScheduledOperationWhereInput
    scheduledIn_some: ScheduledOperationWhereInput
    updatedAt: DateTime
    "All values greater than the given value."
    updatedAt_gt: DateTime
    "All values greater than or equal the given value."
    updatedAt_gte: DateTime
    "All values that are contained in given list."
    updatedAt_in: [DateTime]
    "All values less than the given value."
    updatedAt_lt: DateTime
    "All values less than or equal the given value."
    updatedAt_lte: DateTime
    "All values that are not equal to given value."
    updatedAt_not: DateTime
    "All values that are not contained in given list."
    updatedAt_not_in: [DateTime]
    updatedBy: UserWhereInput
}

input CommentUpdateInput {
    comment: String
    email: String
    name: String
    post: PostUpdateOneInlineInput
}

input CommentUpdateManyInlineInput {
    "Connect multiple existing Comment documents"
    connect: [CommentConnectInput!]
    "Create and connect multiple Comment documents"
    create: [CommentCreateInput!]
    "Delete multiple Comment documents"
    delete: [CommentWhereUniqueInput!]
    "Disconnect multiple Comment documents"
    disconnect: [CommentWhereUniqueInput!]
    "Override currently-connected documents with multiple existing Comment documents"
    set: [CommentWhereUniqueInput!]
    "Update multiple Comment documents"
    update: [CommentUpdateWithNestedWhereUniqueInput!]
    "Upsert multiple Comment documents"
    upsert: [CommentUpsertWithNestedWhereUniqueInput!]
}

input CommentUpdateManyInput {
    comment: String
    email: String
    name: String
}

input CommentUpdateManyWithNestedWhereInput {
    "Update many input"
    data: CommentUpdateManyInput!
    "Document search"
    where: CommentWhereInput!
}

input CommentUpdateOneInlineInput {
    "Connect existing Comment document"
    connect: CommentWhereUniqueInput
    "Create and connect one Comment document"
    create: CommentCreateInput
    "Delete currently connected Comment document"
    delete: Boolean
    "Disconnect currently connected Comment document"
    disconnect: Boolean
    "Update single Comment document"
    update: CommentUpdateWithNestedWhereUniqueInput
    "Upsert single Comment document"
    upsert: CommentUpsertWithNestedWhereUniqueInput
}

input CommentUpdateWithNestedWhereUniqueInput {
    "Document to update"
    data: CommentUpdateInput!
    "Unique document search"
    where: CommentWhereUniqueInput!
}

input CommentUpsertInput {
    "Create document if it didn't exist"
    create: CommentCreateInput!
    "Update document if it exists"
    update: CommentUpdateInput!
}

input CommentUpsertWithNestedWhereUniqueInput {
    "Upsert data"
    data: CommentUpsertInput!
    "Unique document search"
    where: CommentWhereUniqueInput!
}

"This contains a set of filters that can be used to compare values internally"
input CommentWhereComparatorInput {
    "This field can be used to request to check if the entry is outdated by internal comparison"
    outdated_to: Boolean
}

"Identifies documents"
input CommentWhereInput {
    "Logical AND on all given filters."
    AND: [CommentWhereInput!]
    "Logical NOT on all given filters combined by AND."
    NOT: [CommentWhereInput!]
    "Logical OR on all given filters."
    OR: [CommentWhereInput!]
    "Contains search across all appropriate fields."
    _search: String
    comment: String
    "All values containing the given string."
    comment_contains: String
    "All values ending with the given string."
    comment_ends_with: String
    "All values that are contained in given list."
    comment_in: [String]
    "All values that are not equal to given value."
    comment_not: String
    "All values not containing the given string."
    comment_not_contains: String
    "All values not ending with the given string"
    comment_not_ends_with: String
    "All values that are not contained in given list."
    comment_not_in: [String]
    "All values not starting with the given string."
    comment_not_starts_with: String
    "All values starting with the given string."
    comment_starts_with: String
    createdAt: DateTime
    "All values greater than the given value."
    createdAt_gt: DateTime
    "All values greater than or equal the given value."
    createdAt_gte: DateTime
    "All values that are contained in given list."
    createdAt_in: [DateTime]
    "All values less than the given value."
    createdAt_lt: DateTime
    "All values less than or equal the given value."
    createdAt_lte: DateTime
    "All values that are not equal to given value."
    createdAt_not: DateTime
    "All values that are not contained in given list."
    createdAt_not_in: [DateTime]
    createdBy: UserWhereInput
    documentInStages_every: CommentWhereStageInput
    documentInStages_none: CommentWhereStageInput
    documentInStages_some: CommentWhereStageInput
    email: String
    "All values containing the given string."
    email_contains: String
    "All values ending with the given string."
    email_ends_with: String
    "All values that are contained in given list."
    email_in: [String]
    "All values that are not equal to given value."
    email_not: String
    "All values not containing the given string."
    email_not_contains: String
    "All values not ending with the given string"
    email_not_ends_with: String
    "All values that are not contained in given list."
    email_not_in: [String]
    "All values not starting with the given string."
    email_not_starts_with: String
    "All values starting with the given string."
    email_starts_with: String
    id: ID
    "All values containing the given string."
    id_contains: ID
    "All values ending with the given string."
    id_ends_with: ID
    "All values that are contained in given list."
    id_in: [ID]
    "All values that are not equal to given value."
    id_not: ID
    "All values not containing the given string."
    id_not_contains: ID
    "All values not ending with the given string"
    id_not_ends_with: ID
    "All values that are not contained in given list."
    id_not_in: [ID]
    "All values not starting with the given string."
    id_not_starts_with: ID
    "All values starting with the given string."
    id_starts_with: ID
    name: String
    "All values containing the given string."
    name_contains: String
    "All values ending with the given string."
    name_ends_with: String
    "All values that are contained in given list."
    name_in: [String]
    "All values that are not equal to given value."
    name_not: String
    "All values not containing the given string."
    name_not_contains: String
    "All values not ending with the given string"
    name_not_ends_with: String
    "All values that are not contained in given list."
    name_not_in: [String]
    "All values not starting with the given string."
    name_not_starts_with: String
    "All values starting with the given string."
    name_starts_with: String
    post: PostWhereInput
    publishedAt: DateTime
    "All values greater than the given value."
    publishedAt_gt: DateTime
    "All values greater than or equal the given value."
    publishedAt_gte: DateTime
    "All values that are contained in given list."
    publishedAt_in: [DateTime]
    "All values less than the given value."
    publishedAt_lt: DateTime
    "All values less than or equal the given value."
    publishedAt_lte: DateTime
    "All values that are not equal to given value."
    publishedAt_not: DateTime
    "All values that are not contained in given list."
    publishedAt_not_in: [DateTime]
    publishedBy: UserWhereInput
    scheduledIn_every: ScheduledOperationWhereInput
    scheduledIn_none: ScheduledOperationWhereInput
    scheduledIn_some: ScheduledOperationWhereInput
    updatedAt: DateTime
    "All values greater than the given value."
    updatedAt_gt: DateTime
    "All values greater than or equal the given value."
    updatedAt_gte: DateTime
    "All values that are contained in given list."
    updatedAt_in: [DateTime]
    "All values less than the given value."
    updatedAt_lt: DateTime
    "All values less than or equal the given value."
    updatedAt_lte: DateTime
    "All values that are not equal to given value."
    updatedAt_not: DateTime
    "All values that are not contained in given list."
    updatedAt_not_in: [DateTime]
    updatedBy: UserWhereInput
}

"The document in stages filter allows specifying a stage entry to cross compare the same document between different stages"
input CommentWhereStageInput {
    "Logical AND on all given filters."
    AND: [CommentWhereStageInput!]
    "Logical NOT on all given filters combined by AND."
    NOT: [CommentWhereStageInput!]
    "Logical OR on all given filters."
    OR: [CommentWhereStageInput!]
    "This field contains fields which can be set as true or false to specify an internal comparison"
    compareWithParent: CommentWhereComparatorInput
    "Specify the stage to compare with"
    stage: Stage
}

"References Comment record uniquely"
input CommentWhereUniqueInput {
    id: ID
}

input ConnectPositionInput {
    "Connect document after specified document"
    after: ID
    "Connect document before specified document"
    before: ID
    "Connect document at last position"
    end: Boolean
    "Connect document at first position"
    start: Boolean
}

input DocumentOutputInput {
    """

    Transforms a document into a desired file type.
    See this matrix for format support:

    PDF:    jpg, odp, ods, odt, png, svg, txt, and webp
    DOC:    docx, html, jpg, odt, pdf, png, svg, txt, and webp
    DOCX:    doc, html, jpg, odt, pdf, png, svg, txt, and webp
    ODT:    doc, docx, html, jpg, pdf, png, svg, txt, and webp
    XLS:    jpg, pdf, ods, png, svg, xlsx, and webp
    XLSX:    jpg, pdf, ods, png, svg, xls, and webp
    ODS:    jpg, pdf, png, xls, svg, xlsx, and webp
    PPT:    jpg, odp, pdf, png, svg, pptx, and webp
    PPTX:    jpg, odp, pdf, png, svg, ppt, and webp
    ODP:    jpg, pdf, png, ppt, svg, pptx, and webp
    BMP:    jpg, odp, ods, odt, pdf, png, svg, and webp
    GIF:    jpg, odp, ods, odt, pdf, png, svg, and webp
    JPG:    jpg, odp, ods, odt, pdf, png, svg, and webp
    PNG:    jpg, odp, ods, odt, pdf, png, svg, and webp
    WEBP:    jpg, odp, ods, odt, pdf, png, svg, and webp
    TIFF:    jpg, odp, ods, odt, pdf, png, svg, and webp
    AI:        jpg, odp, ods, odt, pdf, png, svg, and webp
    PSD:    jpg, odp, ods, odt, pdf, png, svg, and webp
    SVG:    jpg, odp, ods, odt, pdf, png, and webp
    HTML:    jpg, odt, pdf, svg, txt, and webp
    TXT:    jpg, html, odt, pdf, svg, and webp
    """
    format: DocumentFileTypes
}

"Transformations for Documents"
input DocumentTransformationInput {
    "Changes the output for the file."
    output: DocumentOutputInput
}

input FileConnectInput {
    "Allow to specify document position in list of connected documents, will default to appending at end of list"
    position: ConnectPositionInput
    "Document to connect"
    where: FileWhereUniqueInput!
}

input FileCreateInput {
    accessCount: Int!
    author: String!
    category: CategoryCreateOneInlineInput
    createdAt: DateTime
    description: String!
    libraryFile: AssetCreateOneInlineInput
    mirrorUrl: String!
    name: String!
    publicationYear: Int!
    slug: String!
    subCategories: SubCategoryCreateManyInlineInput
    updatedAt: DateTime
}

input FileCreateManyInlineInput {
    "Connect multiple existing File documents"
    connect: [FileWhereUniqueInput!]
    "Create and connect multiple existing File documents"
    create: [FileCreateInput!]
}

input FileCreateOneInlineInput {
    "Connect one existing File document"
    connect: FileWhereUniqueInput
    "Create and connect one File document"
    create: FileCreateInput
}

"Identifies documents"
input FileManyWhereInput {
    "Logical AND on all given filters."
    AND: [FileWhereInput!]
    "Logical NOT on all given filters combined by AND."
    NOT: [FileWhereInput!]
    "Logical OR on all given filters."
    OR: [FileWhereInput!]
    "Contains search across all appropriate fields."
    _search: String
    accessCount: Int
    "All values greater than the given value."
    accessCount_gt: Int
    "All values greater than or equal the given value."
    accessCount_gte: Int
    "All values that are contained in given list."
    accessCount_in: [Int]
    "All values less than the given value."
    accessCount_lt: Int
    "All values less than or equal the given value."
    accessCount_lte: Int
    "All values that are not equal to given value."
    accessCount_not: Int
    "All values that are not contained in given list."
    accessCount_not_in: [Int]
    author: String
    "All values containing the given string."
    author_contains: String
    "All values ending with the given string."
    author_ends_with: String
    "All values that are contained in given list."
    author_in: [String]
    "All values that are not equal to given value."
    author_not: String
    "All values not containing the given string."
    author_not_contains: String
    "All values not ending with the given string"
    author_not_ends_with: String
    "All values that are not contained in given list."
    author_not_in: [String]
    "All values not starting with the given string."
    author_not_starts_with: String
    "All values starting with the given string."
    author_starts_with: String
    category: CategoryWhereInput
    createdAt: DateTime
    "All values greater than the given value."
    createdAt_gt: DateTime
    "All values greater than or equal the given value."
    createdAt_gte: DateTime
    "All values that are contained in given list."
    createdAt_in: [DateTime]
    "All values less than the given value."
    createdAt_lt: DateTime
    "All values less than or equal the given value."
    createdAt_lte: DateTime
    "All values that are not equal to given value."
    createdAt_not: DateTime
    "All values that are not contained in given list."
    createdAt_not_in: [DateTime]
    createdBy: UserWhereInput
    description: String
    "All values containing the given string."
    description_contains: String
    "All values ending with the given string."
    description_ends_with: String
    "All values that are contained in given list."
    description_in: [String]
    "All values that are not equal to given value."
    description_not: String
    "All values not containing the given string."
    description_not_contains: String
    "All values not ending with the given string"
    description_not_ends_with: String
    "All values that are not contained in given list."
    description_not_in: [String]
    "All values not starting with the given string."
    description_not_starts_with: String
    "All values starting with the given string."
    description_starts_with: String
    documentInStages_every: FileWhereStageInput
    documentInStages_none: FileWhereStageInput
    documentInStages_some: FileWhereStageInput
    id: ID
    "All values containing the given string."
    id_contains: ID
    "All values ending with the given string."
    id_ends_with: ID
    "All values that are contained in given list."
    id_in: [ID]
    "All values that are not equal to given value."
    id_not: ID
    "All values not containing the given string."
    id_not_contains: ID
    "All values not ending with the given string"
    id_not_ends_with: ID
    "All values that are not contained in given list."
    id_not_in: [ID]
    "All values not starting with the given string."
    id_not_starts_with: ID
    "All values starting with the given string."
    id_starts_with: ID
    libraryFile: AssetWhereInput
    mirrorUrl: String
    "All values containing the given string."
    mirrorUrl_contains: String
    "All values ending with the given string."
    mirrorUrl_ends_with: String
    "All values that are contained in given list."
    mirrorUrl_in: [String]
    "All values that are not equal to given value."
    mirrorUrl_not: String
    "All values not containing the given string."
    mirrorUrl_not_contains: String
    "All values not ending with the given string"
    mirrorUrl_not_ends_with: String
    "All values that are not contained in given list."
    mirrorUrl_not_in: [String]
    "All values not starting with the given string."
    mirrorUrl_not_starts_with: String
    "All values starting with the given string."
    mirrorUrl_starts_with: String
    name: String
    "All values containing the given string."
    name_contains: String
    "All values ending with the given string."
    name_ends_with: String
    "All values that are contained in given list."
    name_in: [String]
    "All values that are not equal to given value."
    name_not: String
    "All values not containing the given string."
    name_not_contains: String
    "All values not ending with the given string"
    name_not_ends_with: String
    "All values that are not contained in given list."
    name_not_in: [String]
    "All values not starting with the given string."
    name_not_starts_with: String
    "All values starting with the given string."
    name_starts_with: String
    publicationYear: Int
    "All values greater than the given value."
    publicationYear_gt: Int
    "All values greater than or equal the given value."
    publicationYear_gte: Int
    "All values that are contained in given list."
    publicationYear_in: [Int]
    "All values less than the given value."
    publicationYear_lt: Int
    "All values less than or equal the given value."
    publicationYear_lte: Int
    "All values that are not equal to given value."
    publicationYear_not: Int
    "All values that are not contained in given list."
    publicationYear_not_in: [Int]
    publishedAt: DateTime
    "All values greater than the given value."
    publishedAt_gt: DateTime
    "All values greater than or equal the given value."
    publishedAt_gte: DateTime
    "All values that are contained in given list."
    publishedAt_in: [DateTime]
    "All values less than the given value."
    publishedAt_lt: DateTime
    "All values less than or equal the given value."
    publishedAt_lte: DateTime
    "All values that are not equal to given value."
    publishedAt_not: DateTime
    "All values that are not contained in given list."
    publishedAt_not_in: [DateTime]
    publishedBy: UserWhereInput
    scheduledIn_every: ScheduledOperationWhereInput
    scheduledIn_none: ScheduledOperationWhereInput
    scheduledIn_some: ScheduledOperationWhereInput
    slug: String
    "All values containing the given string."
    slug_contains: String
    "All values ending with the given string."
    slug_ends_with: String
    "All values that are contained in given list."
    slug_in: [String]
    "All values that are not equal to given value."
    slug_not: String
    "All values not containing the given string."
    slug_not_contains: String
    "All values not ending with the given string"
    slug_not_ends_with: String
    "All values that are not contained in given list."
    slug_not_in: [String]
    "All values not starting with the given string."
    slug_not_starts_with: String
    "All values starting with the given string."
    slug_starts_with: String
    subCategories_every: SubCategoryWhereInput
    subCategories_none: SubCategoryWhereInput
    subCategories_some: SubCategoryWhereInput
    updatedAt: DateTime
    "All values greater than the given value."
    updatedAt_gt: DateTime
    "All values greater than or equal the given value."
    updatedAt_gte: DateTime
    "All values that are contained in given list."
    updatedAt_in: [DateTime]
    "All values less than the given value."
    updatedAt_lt: DateTime
    "All values less than or equal the given value."
    updatedAt_lte: DateTime
    "All values that are not equal to given value."
    updatedAt_not: DateTime
    "All values that are not contained in given list."
    updatedAt_not_in: [DateTime]
    updatedBy: UserWhereInput
}

input FileUpdateInput {
    accessCount: Int
    author: String
    category: CategoryUpdateOneInlineInput
    description: String
    libraryFile: AssetUpdateOneInlineInput
    mirrorUrl: String
    name: String
    publicationYear: Int
    slug: String
    subCategories: SubCategoryUpdateManyInlineInput
}

input FileUpdateManyInlineInput {
    "Connect multiple existing File documents"
    connect: [FileConnectInput!]
    "Create and connect multiple File documents"
    create: [FileCreateInput!]
    "Delete multiple File documents"
    delete: [FileWhereUniqueInput!]
    "Disconnect multiple File documents"
    disconnect: [FileWhereUniqueInput!]
    "Override currently-connected documents with multiple existing File documents"
    set: [FileWhereUniqueInput!]
    "Update multiple File documents"
    update: [FileUpdateWithNestedWhereUniqueInput!]
    "Upsert multiple File documents"
    upsert: [FileUpsertWithNestedWhereUniqueInput!]
}

input FileUpdateManyInput {
    accessCount: Int
    author: String
    description: String
    mirrorUrl: String
    name: String
    publicationYear: Int
}

input FileUpdateManyWithNestedWhereInput {
    "Update many input"
    data: FileUpdateManyInput!
    "Document search"
    where: FileWhereInput!
}

input FileUpdateOneInlineInput {
    "Connect existing File document"
    connect: FileWhereUniqueInput
    "Create and connect one File document"
    create: FileCreateInput
    "Delete currently connected File document"
    delete: Boolean
    "Disconnect currently connected File document"
    disconnect: Boolean
    "Update single File document"
    update: FileUpdateWithNestedWhereUniqueInput
    "Upsert single File document"
    upsert: FileUpsertWithNestedWhereUniqueInput
}

input FileUpdateWithNestedWhereUniqueInput {
    "Document to update"
    data: FileUpdateInput!
    "Unique document search"
    where: FileWhereUniqueInput!
}

input FileUpsertInput {
    "Create document if it didn't exist"
    create: FileCreateInput!
    "Update document if it exists"
    update: FileUpdateInput!
}

input FileUpsertWithNestedWhereUniqueInput {
    "Upsert data"
    data: FileUpsertInput!
    "Unique document search"
    where: FileWhereUniqueInput!
}

"This contains a set of filters that can be used to compare values internally"
input FileWhereComparatorInput {
    "This field can be used to request to check if the entry is outdated by internal comparison"
    outdated_to: Boolean
}

"Identifies documents"
input FileWhereInput {
    "Logical AND on all given filters."
    AND: [FileWhereInput!]
    "Logical NOT on all given filters combined by AND."
    NOT: [FileWhereInput!]
    "Logical OR on all given filters."
    OR: [FileWhereInput!]
    "Contains search across all appropriate fields."
    _search: String
    accessCount: Int
    "All values greater than the given value."
    accessCount_gt: Int
    "All values greater than or equal the given value."
    accessCount_gte: Int
    "All values that are contained in given list."
    accessCount_in: [Int]
    "All values less than the given value."
    accessCount_lt: Int
    "All values less than or equal the given value."
    accessCount_lte: Int
    "All values that are not equal to given value."
    accessCount_not: Int
    "All values that are not contained in given list."
    accessCount_not_in: [Int]
    author: String
    "All values containing the given string."
    author_contains: String
    "All values ending with the given string."
    author_ends_with: String
    "All values that are contained in given list."
    author_in: [String]
    "All values that are not equal to given value."
    author_not: String
    "All values not containing the given string."
    author_not_contains: String
    "All values not ending with the given string"
    author_not_ends_with: String
    "All values that are not contained in given list."
    author_not_in: [String]
    "All values not starting with the given string."
    author_not_starts_with: String
    "All values starting with the given string."
    author_starts_with: String
    category: CategoryWhereInput
    createdAt: DateTime
    "All values greater than the given value."
    createdAt_gt: DateTime
    "All values greater than or equal the given value."
    createdAt_gte: DateTime
    "All values that are contained in given list."
    createdAt_in: [DateTime]
    "All values less than the given value."
    createdAt_lt: DateTime
    "All values less than or equal the given value."
    createdAt_lte: DateTime
    "All values that are not equal to given value."
    createdAt_not: DateTime
    "All values that are not contained in given list."
    createdAt_not_in: [DateTime]
    createdBy: UserWhereInput
    description: String
    "All values containing the given string."
    description_contains: String
    "All values ending with the given string."
    description_ends_with: String
    "All values that are contained in given list."
    description_in: [String]
    "All values that are not equal to given value."
    description_not: String
    "All values not containing the given string."
    description_not_contains: String
    "All values not ending with the given string"
    description_not_ends_with: String
    "All values that are not contained in given list."
    description_not_in: [String]
    "All values not starting with the given string."
    description_not_starts_with: String
    "All values starting with the given string."
    description_starts_with: String
    documentInStages_every: FileWhereStageInput
    documentInStages_none: FileWhereStageInput
    documentInStages_some: FileWhereStageInput
    id: ID
    "All values containing the given string."
    id_contains: ID
    "All values ending with the given string."
    id_ends_with: ID
    "All values that are contained in given list."
    id_in: [ID]
    "All values that are not equal to given value."
    id_not: ID
    "All values not containing the given string."
    id_not_contains: ID
    "All values not ending with the given string"
    id_not_ends_with: ID
    "All values that are not contained in given list."
    id_not_in: [ID]
    "All values not starting with the given string."
    id_not_starts_with: ID
    "All values starting with the given string."
    id_starts_with: ID
    libraryFile: AssetWhereInput
    mirrorUrl: String
    "All values containing the given string."
    mirrorUrl_contains: String
    "All values ending with the given string."
    mirrorUrl_ends_with: String
    "All values that are contained in given list."
    mirrorUrl_in: [String]
    "All values that are not equal to given value."
    mirrorUrl_not: String
    "All values not containing the given string."
    mirrorUrl_not_contains: String
    "All values not ending with the given string"
    mirrorUrl_not_ends_with: String
    "All values that are not contained in given list."
    mirrorUrl_not_in: [String]
    "All values not starting with the given string."
    mirrorUrl_not_starts_with: String
    "All values starting with the given string."
    mirrorUrl_starts_with: String
    name: String
    "All values containing the given string."
    name_contains: String
    "All values ending with the given string."
    name_ends_with: String
    "All values that are contained in given list."
    name_in: [String]
    "All values that are not equal to given value."
    name_not: String
    "All values not containing the given string."
    name_not_contains: String
    "All values not ending with the given string"
    name_not_ends_with: String
    "All values that are not contained in given list."
    name_not_in: [String]
    "All values not starting with the given string."
    name_not_starts_with: String
    "All values starting with the given string."
    name_starts_with: String
    publicationYear: Int
    "All values greater than the given value."
    publicationYear_gt: Int
    "All values greater than or equal the given value."
    publicationYear_gte: Int
    "All values that are contained in given list."
    publicationYear_in: [Int]
    "All values less than the given value."
    publicationYear_lt: Int
    "All values less than or equal the given value."
    publicationYear_lte: Int
    "All values that are not equal to given value."
    publicationYear_not: Int
    "All values that are not contained in given list."
    publicationYear_not_in: [Int]
    publishedAt: DateTime
    "All values greater than the given value."
    publishedAt_gt: DateTime
    "All values greater than or equal the given value."
    publishedAt_gte: DateTime
    "All values that are contained in given list."
    publishedAt_in: [DateTime]
    "All values less than the given value."
    publishedAt_lt: DateTime
    "All values less than or equal the given value."
    publishedAt_lte: DateTime
    "All values that are not equal to given value."
    publishedAt_not: DateTime
    "All values that are not contained in given list."
    publishedAt_not_in: [DateTime]
    publishedBy: UserWhereInput
    scheduledIn_every: ScheduledOperationWhereInput
    scheduledIn_none: ScheduledOperationWhereInput
    scheduledIn_some: ScheduledOperationWhereInput
    slug: String
    "All values containing the given string."
    slug_contains: String
    "All values ending with the given string."
    slug_ends_with: String
    "All values that are contained in given list."
    slug_in: [String]
    "All values that are not equal to given value."
    slug_not: String
    "All values not containing the given string."
    slug_not_contains: String
    "All values not ending with the given string"
    slug_not_ends_with: String
    "All values that are not contained in given list."
    slug_not_in: [String]
    "All values not starting with the given string."
    slug_not_starts_with: String
    "All values starting with the given string."
    slug_starts_with: String
    subCategories_every: SubCategoryWhereInput
    subCategories_none: SubCategoryWhereInput
    subCategories_some: SubCategoryWhereInput
    updatedAt: DateTime
    "All values greater than the given value."
    updatedAt_gt: DateTime
    "All values greater than or equal the given value."
    updatedAt_gte: DateTime
    "All values that are contained in given list."
    updatedAt_in: [DateTime]
    "All values less than the given value."
    updatedAt_lt: DateTime
    "All values less than or equal the given value."
    updatedAt_lte: DateTime
    "All values that are not equal to given value."
    updatedAt_not: DateTime
    "All values that are not contained in given list."
    updatedAt_not_in: [DateTime]
    updatedBy: UserWhereInput
}

"The document in stages filter allows specifying a stage entry to cross compare the same document between different stages"
input FileWhereStageInput {
    "Logical AND on all given filters."
    AND: [FileWhereStageInput!]
    "Logical NOT on all given filters combined by AND."
    NOT: [FileWhereStageInput!]
    "Logical OR on all given filters."
    OR: [FileWhereStageInput!]
    "This field contains fields which can be set as true or false to specify an internal comparison"
    compareWithParent: FileWhereComparatorInput
    "Specify the stage to compare with"
    stage: Stage
}

"References File record uniquely"
input FileWhereUniqueInput {
    id: ID
    slug: String
}

input ImageResizeInput {
    "The default value for the fit parameter is fit:clip."
    fit: ImageFit
    "The height in pixels to resize the image to. The value must be an integer from 1 to 10000."
    height: Int
    "The width in pixels to resize the image to. The value must be an integer from 1 to 10000."
    width: Int
}

"Transformations for Images"
input ImageTransformationInput {
    "Resizes the image"
    resize: ImageResizeInput
}

"Input for a geolocation point with latitude and longitude"
input LocationInput {
    latitude: Float!
    longitude: Float!
}

input PostConnectInput {
    "Allow to specify document position in list of connected documents, will default to appending at end of list"
    position: ConnectPositionInput
    "Document to connect"
    where: PostWhereUniqueInput!
}

input PostCreateInput {
    author: AuthorCreateOneInlineInput
    category: CategoryCreateOneInlineInput
    comments: CommentCreateManyInlineInput
    content: RichTextAST!
    createdAt: DateTime
    excerpt: String!
    featuredImage: AssetCreateOneInlineInput!
    featuredPost: Boolean!
    slug: String!
    subCategories: SubCategoryCreateManyInlineInput
    title: String!
    updatedAt: DateTime
}

input PostCreateManyInlineInput {
    "Connect multiple existing Post documents"
    connect: [PostWhereUniqueInput!]
    "Create and connect multiple existing Post documents"
    create: [PostCreateInput!]
}

input PostCreateOneInlineInput {
    "Connect one existing Post document"
    connect: PostWhereUniqueInput
    "Create and connect one Post document"
    create: PostCreateInput
}

"Identifies documents"
input PostManyWhereInput {
    "Logical AND on all given filters."
    AND: [PostWhereInput!]
    "Logical NOT on all given filters combined by AND."
    NOT: [PostWhereInput!]
    "Logical OR on all given filters."
    OR: [PostWhereInput!]
    "Contains search across all appropriate fields."
    _search: String
    author: AuthorWhereInput
    category: CategoryWhereInput
    comments_every: CommentWhereInput
    comments_none: CommentWhereInput
    comments_some: CommentWhereInput
    createdAt: DateTime
    "All values greater than the given value."
    createdAt_gt: DateTime
    "All values greater than or equal the given value."
    createdAt_gte: DateTime
    "All values that are contained in given list."
    createdAt_in: [DateTime]
    "All values less than the given value."
    createdAt_lt: DateTime
    "All values less than or equal the given value."
    createdAt_lte: DateTime
    "All values that are not equal to given value."
    createdAt_not: DateTime
    "All values that are not contained in given list."
    createdAt_not_in: [DateTime]
    createdBy: UserWhereInput
    documentInStages_every: PostWhereStageInput
    documentInStages_none: PostWhereStageInput
    documentInStages_some: PostWhereStageInput
    excerpt: String
    "All values containing the given string."
    excerpt_contains: String
    "All values ending with the given string."
    excerpt_ends_with: String
    "All values that are contained in given list."
    excerpt_in: [String]
    "All values that are not equal to given value."
    excerpt_not: String
    "All values not containing the given string."
    excerpt_not_contains: String
    "All values not ending with the given string"
    excerpt_not_ends_with: String
    "All values that are not contained in given list."
    excerpt_not_in: [String]
    "All values not starting with the given string."
    excerpt_not_starts_with: String
    "All values starting with the given string."
    excerpt_starts_with: String
    featuredImage: AssetWhereInput
    featuredPost: Boolean
    "All values that are not equal to given value."
    featuredPost_not: Boolean
    id: ID
    "All values containing the given string."
    id_contains: ID
    "All values ending with the given string."
    id_ends_with: ID
    "All values that are contained in given list."
    id_in: [ID]
    "All values that are not equal to given value."
    id_not: ID
    "All values not containing the given string."
    id_not_contains: ID
    "All values not ending with the given string"
    id_not_ends_with: ID
    "All values that are not contained in given list."
    id_not_in: [ID]
    "All values not starting with the given string."
    id_not_starts_with: ID
    "All values starting with the given string."
    id_starts_with: ID
    publishedAt: DateTime
    "All values greater than the given value."
    publishedAt_gt: DateTime
    "All values greater than or equal the given value."
    publishedAt_gte: DateTime
    "All values that are contained in given list."
    publishedAt_in: [DateTime]
    "All values less than the given value."
    publishedAt_lt: DateTime
    "All values less than or equal the given value."
    publishedAt_lte: DateTime
    "All values that are not equal to given value."
    publishedAt_not: DateTime
    "All values that are not contained in given list."
    publishedAt_not_in: [DateTime]
    publishedBy: UserWhereInput
    scheduledIn_every: ScheduledOperationWhereInput
    scheduledIn_none: ScheduledOperationWhereInput
    scheduledIn_some: ScheduledOperationWhereInput
    slug: String
    "All values containing the given string."
    slug_contains: String
    "All values ending with the given string."
    slug_ends_with: String
    "All values that are contained in given list."
    slug_in: [String]
    "All values that are not equal to given value."
    slug_not: String
    "All values not containing the given string."
    slug_not_contains: String
    "All values not ending with the given string"
    slug_not_ends_with: String
    "All values that are not contained in given list."
    slug_not_in: [String]
    "All values not starting with the given string."
    slug_not_starts_with: String
    "All values starting with the given string."
    slug_starts_with: String
    subCategories_every: SubCategoryWhereInput
    subCategories_none: SubCategoryWhereInput
    subCategories_some: SubCategoryWhereInput
    title: String
    "All values containing the given string."
    title_contains: String
    "All values ending with the given string."
    title_ends_with: String
    "All values that are contained in given list."
    title_in: [String]
    "All values that are not equal to given value."
    title_not: String
    "All values not containing the given string."
    title_not_contains: String
    "All values not ending with the given string"
    title_not_ends_with: String
    "All values that are not contained in given list."
    title_not_in: [String]
    "All values not starting with the given string."
    title_not_starts_with: String
    "All values starting with the given string."
    title_starts_with: String
    updatedAt: DateTime
    "All values greater than the given value."
    updatedAt_gt: DateTime
    "All values greater than or equal the given value."
    updatedAt_gte: DateTime
    "All values that are contained in given list."
    updatedAt_in: [DateTime]
    "All values less than the given value."
    updatedAt_lt: DateTime
    "All values less than or equal the given value."
    updatedAt_lte: DateTime
    "All values that are not equal to given value."
    updatedAt_not: DateTime
    "All values that are not contained in given list."
    updatedAt_not_in: [DateTime]
    updatedBy: UserWhereInput
}

input PostUpdateInput {
    author: AuthorUpdateOneInlineInput
    category: CategoryUpdateOneInlineInput
    comments: CommentUpdateManyInlineInput
    content: RichTextAST
    excerpt: String
    featuredImage: AssetUpdateOneInlineInput
    featuredPost: Boolean
    slug: String
    subCategories: SubCategoryUpdateManyInlineInput
    title: String
}

input PostUpdateManyInlineInput {
    "Connect multiple existing Post documents"
    connect: [PostConnectInput!]
    "Create and connect multiple Post documents"
    create: [PostCreateInput!]
    "Delete multiple Post documents"
    delete: [PostWhereUniqueInput!]
    "Disconnect multiple Post documents"
    disconnect: [PostWhereUniqueInput!]
    "Override currently-connected documents with multiple existing Post documents"
    set: [PostWhereUniqueInput!]
    "Update multiple Post documents"
    update: [PostUpdateWithNestedWhereUniqueInput!]
    "Upsert multiple Post documents"
    upsert: [PostUpsertWithNestedWhereUniqueInput!]
}

input PostUpdateManyInput {
    content: RichTextAST
    excerpt: String
    featuredPost: Boolean
    title: String
}

input PostUpdateManyWithNestedWhereInput {
    "Update many input"
    data: PostUpdateManyInput!
    "Document search"
    where: PostWhereInput!
}

input PostUpdateOneInlineInput {
    "Connect existing Post document"
    connect: PostWhereUniqueInput
    "Create and connect one Post document"
    create: PostCreateInput
    "Delete currently connected Post document"
    delete: Boolean
    "Disconnect currently connected Post document"
    disconnect: Boolean
    "Update single Post document"
    update: PostUpdateWithNestedWhereUniqueInput
    "Upsert single Post document"
    upsert: PostUpsertWithNestedWhereUniqueInput
}

input PostUpdateWithNestedWhereUniqueInput {
    "Document to update"
    data: PostUpdateInput!
    "Unique document search"
    where: PostWhereUniqueInput!
}

input PostUpsertInput {
    "Create document if it didn't exist"
    create: PostCreateInput!
    "Update document if it exists"
    update: PostUpdateInput!
}

input PostUpsertWithNestedWhereUniqueInput {
    "Upsert data"
    data: PostUpsertInput!
    "Unique document search"
    where: PostWhereUniqueInput!
}

"This contains a set of filters that can be used to compare values internally"
input PostWhereComparatorInput {
    "This field can be used to request to check if the entry is outdated by internal comparison"
    outdated_to: Boolean
}

"Identifies documents"
input PostWhereInput {
    "Logical AND on all given filters."
    AND: [PostWhereInput!]
    "Logical NOT on all given filters combined by AND."
    NOT: [PostWhereInput!]
    "Logical OR on all given filters."
    OR: [PostWhereInput!]
    "Contains search across all appropriate fields."
    _search: String
    author: AuthorWhereInput
    category: CategoryWhereInput
    comments_every: CommentWhereInput
    comments_none: CommentWhereInput
    comments_some: CommentWhereInput
    createdAt: DateTime
    "All values greater than the given value."
    createdAt_gt: DateTime
    "All values greater than or equal the given value."
    createdAt_gte: DateTime
    "All values that are contained in given list."
    createdAt_in: [DateTime]
    "All values less than the given value."
    createdAt_lt: DateTime
    "All values less than or equal the given value."
    createdAt_lte: DateTime
    "All values that are not equal to given value."
    createdAt_not: DateTime
    "All values that are not contained in given list."
    createdAt_not_in: [DateTime]
    createdBy: UserWhereInput
    documentInStages_every: PostWhereStageInput
    documentInStages_none: PostWhereStageInput
    documentInStages_some: PostWhereStageInput
    excerpt: String
    "All values containing the given string."
    excerpt_contains: String
    "All values ending with the given string."
    excerpt_ends_with: String
    "All values that are contained in given list."
    excerpt_in: [String]
    "All values that are not equal to given value."
    excerpt_not: String
    "All values not containing the given string."
    excerpt_not_contains: String
    "All values not ending with the given string"
    excerpt_not_ends_with: String
    "All values that are not contained in given list."
    excerpt_not_in: [String]
    "All values not starting with the given string."
    excerpt_not_starts_with: String
    "All values starting with the given string."
    excerpt_starts_with: String
    featuredImage: AssetWhereInput
    featuredPost: Boolean
    "All values that are not equal to given value."
    featuredPost_not: Boolean
    id: ID
    "All values containing the given string."
    id_contains: ID
    "All values ending with the given string."
    id_ends_with: ID
    "All values that are contained in given list."
    id_in: [ID]
    "All values that are not equal to given value."
    id_not: ID
    "All values not containing the given string."
    id_not_contains: ID
    "All values not ending with the given string"
    id_not_ends_with: ID
    "All values that are not contained in given list."
    id_not_in: [ID]
    "All values not starting with the given string."
    id_not_starts_with: ID
    "All values starting with the given string."
    id_starts_with: ID
    publishedAt: DateTime
    "All values greater than the given value."
    publishedAt_gt: DateTime
    "All values greater than or equal the given value."
    publishedAt_gte: DateTime
    "All values that are contained in given list."
    publishedAt_in: [DateTime]
    "All values less than the given value."
    publishedAt_lt: DateTime
    "All values less than or equal the given value."
    publishedAt_lte: DateTime
    "All values that are not equal to given value."
    publishedAt_not: DateTime
    "All values that are not contained in given list."
    publishedAt_not_in: [DateTime]
    publishedBy: UserWhereInput
    scheduledIn_every: ScheduledOperationWhereInput
    scheduledIn_none: ScheduledOperationWhereInput
    scheduledIn_some: ScheduledOperationWhereInput
    slug: String
    "All values containing the given string."
    slug_contains: String
    "All values ending with the given string."
    slug_ends_with: String
    "All values that are contained in given list."
    slug_in: [String]
    "All values that are not equal to given value."
    slug_not: String
    "All values not containing the given string."
    slug_not_contains: String
    "All values not ending with the given string"
    slug_not_ends_with: String
    "All values that are not contained in given list."
    slug_not_in: [String]
    "All values not starting with the given string."
    slug_not_starts_with: String
    "All values starting with the given string."
    slug_starts_with: String
    subCategories_every: SubCategoryWhereInput
    subCategories_none: SubCategoryWhereInput
    subCategories_some: SubCategoryWhereInput
    title: String
    "All values containing the given string."
    title_contains: String
    "All values ending with the given string."
    title_ends_with: String
    "All values that are contained in given list."
    title_in: [String]
    "All values that are not equal to given value."
    title_not: String
    "All values not containing the given string."
    title_not_contains: String
    "All values not ending with the given string"
    title_not_ends_with: String
    "All values that are not contained in given list."
    title_not_in: [String]
    "All values not starting with the given string."
    title_not_starts_with: String
    "All values starting with the given string."
    title_starts_with: String
    updatedAt: DateTime
    "All values greater than the given value."
    updatedAt_gt: DateTime
    "All values greater than or equal the given value."
    updatedAt_gte: DateTime
    "All values that are contained in given list."
    updatedAt_in: [DateTime]
    "All values less than the given value."
    updatedAt_lt: DateTime
    "All values less than or equal the given value."
    updatedAt_lte: DateTime
    "All values that are not equal to given value."
    updatedAt_not: DateTime
    "All values that are not contained in given list."
    updatedAt_not_in: [DateTime]
    updatedBy: UserWhereInput
}

"The document in stages filter allows specifying a stage entry to cross compare the same document between different stages"
input PostWhereStageInput {
    "Logical AND on all given filters."
    AND: [PostWhereStageInput!]
    "Logical NOT on all given filters combined by AND."
    NOT: [PostWhereStageInput!]
    "Logical OR on all given filters."
    OR: [PostWhereStageInput!]
    "This field contains fields which can be set as true or false to specify an internal comparison"
    compareWithParent: PostWhereComparatorInput
    "Specify the stage to compare with"
    stage: Stage
}

"References Post record uniquely"
input PostWhereUniqueInput {
    id: ID
    slug: String
}

input PublishLocaleInput {
    "Locales to publish"
    locale: Locale!
    "Stages to publish selected locales to"
    stages: [Stage!]!
}

"Input type representing a RGBA color value: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgb()_and_rgba()"
input RGBAInput {
    a: RGBATransparency!
    b: RGBAHue!
    g: RGBAHue!
    r: RGBAHue!
}

input ScheduledOperationConnectInput {
    "Allow to specify document position in list of connected documents, will default to appending at end of list"
    position: ConnectPositionInput
    "Document to connect"
    where: ScheduledOperationWhereUniqueInput!
}

input ScheduledOperationCreateManyInlineInput {
    "Connect multiple existing ScheduledOperation documents"
    connect: [ScheduledOperationWhereUniqueInput!]
}

input ScheduledOperationCreateOneInlineInput {
    "Connect one existing ScheduledOperation document"
    connect: ScheduledOperationWhereUniqueInput
}

"Identifies documents"
input ScheduledOperationManyWhereInput {
    "Logical AND on all given filters."
    AND: [ScheduledOperationWhereInput!]
    "Logical NOT on all given filters combined by AND."
    NOT: [ScheduledOperationWhereInput!]
    "Logical OR on all given filters."
    OR: [ScheduledOperationWhereInput!]
    "Contains search across all appropriate fields."
    _search: String
    createdAt: DateTime
    "All values greater than the given value."
    createdAt_gt: DateTime
    "All values greater than or equal the given value."
    createdAt_gte: DateTime
    "All values that are contained in given list."
    createdAt_in: [DateTime]
    "All values less than the given value."
    createdAt_lt: DateTime
    "All values less than or equal the given value."
    createdAt_lte: DateTime
    "All values that are not equal to given value."
    createdAt_not: DateTime
    "All values that are not contained in given list."
    createdAt_not_in: [DateTime]
    createdBy: UserWhereInput
    description: String
    "All values containing the given string."
    description_contains: String
    "All values ending with the given string."
    description_ends_with: String
    "All values that are contained in given list."
    description_in: [String]
    "All values that are not equal to given value."
    description_not: String
    "All values not containing the given string."
    description_not_contains: String
    "All values not ending with the given string"
    description_not_ends_with: String
    "All values that are not contained in given list."
    description_not_in: [String]
    "All values not starting with the given string."
    description_not_starts_with: String
    "All values starting with the given string."
    description_starts_with: String
    errorMessage: String
    "All values containing the given string."
    errorMessage_contains: String
    "All values ending with the given string."
    errorMessage_ends_with: String
    "All values that are contained in given list."
    errorMessage_in: [String]
    "All values that are not equal to given value."
    errorMessage_not: String
    "All values not containing the given string."
    errorMessage_not_contains: String
    "All values not ending with the given string"
    errorMessage_not_ends_with: String
    "All values that are not contained in given list."
    errorMessage_not_in: [String]
    "All values not starting with the given string."
    errorMessage_not_starts_with: String
    "All values starting with the given string."
    errorMessage_starts_with: String
    id: ID
    "All values containing the given string."
    id_contains: ID
    "All values ending with the given string."
    id_ends_with: ID
    "All values that are contained in given list."
    id_in: [ID]
    "All values that are not equal to given value."
    id_not: ID
    "All values not containing the given string."
    id_not_contains: ID
    "All values not ending with the given string"
    id_not_ends_with: ID
    "All values that are not contained in given list."
    id_not_in: [ID]
    "All values not starting with the given string."
    id_not_starts_with: ID
    "All values starting with the given string."
    id_starts_with: ID
    publishedAt: DateTime
    "All values greater than the given value."
    publishedAt_gt: DateTime
    "All values greater than or equal the given value."
    publishedAt_gte: DateTime
    "All values that are contained in given list."
    publishedAt_in: [DateTime]
    "All values less than the given value."
    publishedAt_lt: DateTime
    "All values less than or equal the given value."
    publishedAt_lte: DateTime
    "All values that are not equal to given value."
    publishedAt_not: DateTime
    "All values that are not contained in given list."
    publishedAt_not_in: [DateTime]
    publishedBy: UserWhereInput
    release: ScheduledReleaseWhereInput
    status: ScheduledOperationStatus
    "All values that are contained in given list."
    status_in: [ScheduledOperationStatus]
    "All values that are not equal to given value."
    status_not: ScheduledOperationStatus
    "All values that are not contained in given list."
    status_not_in: [ScheduledOperationStatus]
    updatedAt: DateTime
    "All values greater than the given value."
    updatedAt_gt: DateTime
    "All values greater than or equal the given value."
    updatedAt_gte: DateTime
    "All values that are contained in given list."
    updatedAt_in: [DateTime]
    "All values less than the given value."
    updatedAt_lt: DateTime
    "All values less than or equal the given value."
    updatedAt_lte: DateTime
    "All values that are not equal to given value."
    updatedAt_not: DateTime
    "All values that are not contained in given list."
    updatedAt_not_in: [DateTime]
    updatedBy: UserWhereInput
}

input ScheduledOperationUpdateManyInlineInput {
    "Connect multiple existing ScheduledOperation documents"
    connect: [ScheduledOperationConnectInput!]
    "Disconnect multiple ScheduledOperation documents"
    disconnect: [ScheduledOperationWhereUniqueInput!]
    "Override currently-connected documents with multiple existing ScheduledOperation documents"
    set: [ScheduledOperationWhereUniqueInput!]
}

input ScheduledOperationUpdateOneInlineInput {
    "Connect existing ScheduledOperation document"
    connect: ScheduledOperationWhereUniqueInput
    "Disconnect currently connected ScheduledOperation document"
    disconnect: Boolean
}

"Identifies documents"
input ScheduledOperationWhereInput {
    "Logical AND on all given filters."
    AND: [ScheduledOperationWhereInput!]
    "Logical NOT on all given filters combined by AND."
    NOT: [ScheduledOperationWhereInput!]
    "Logical OR on all given filters."
    OR: [ScheduledOperationWhereInput!]
    "Contains search across all appropriate fields."
    _search: String
    createdAt: DateTime
    "All values greater than the given value."
    createdAt_gt: DateTime
    "All values greater than or equal the given value."
    createdAt_gte: DateTime
    "All values that are contained in given list."
    createdAt_in: [DateTime]
    "All values less than the given value."
    createdAt_lt: DateTime
    "All values less than or equal the given value."
    createdAt_lte: DateTime
    "All values that are not equal to given value."
    createdAt_not: DateTime
    "All values that are not contained in given list."
    createdAt_not_in: [DateTime]
    createdBy: UserWhereInput
    description: String
    "All values containing the given string."
    description_contains: String
    "All values ending with the given string."
    description_ends_with: String
    "All values that are contained in given list."
    description_in: [String]
    "All values that are not equal to given value."
    description_not: String
    "All values not containing the given string."
    description_not_contains: String
    "All values not ending with the given string"
    description_not_ends_with: String
    "All values that are not contained in given list."
    description_not_in: [String]
    "All values not starting with the given string."
    description_not_starts_with: String
    "All values starting with the given string."
    description_starts_with: String
    errorMessage: String
    "All values containing the given string."
    errorMessage_contains: String
    "All values ending with the given string."
    errorMessage_ends_with: String
    "All values that are contained in given list."
    errorMessage_in: [String]
    "All values that are not equal to given value."
    errorMessage_not: String
    "All values not containing the given string."
    errorMessage_not_contains: String
    "All values not ending with the given string"
    errorMessage_not_ends_with: String
    "All values that are not contained in given list."
    errorMessage_not_in: [String]
    "All values not starting with the given string."
    errorMessage_not_starts_with: String
    "All values starting with the given string."
    errorMessage_starts_with: String
    id: ID
    "All values containing the given string."
    id_contains: ID
    "All values ending with the given string."
    id_ends_with: ID
    "All values that are contained in given list."
    id_in: [ID]
    "All values that are not equal to given value."
    id_not: ID
    "All values not containing the given string."
    id_not_contains: ID
    "All values not ending with the given string"
    id_not_ends_with: ID
    "All values that are not contained in given list."
    id_not_in: [ID]
    "All values not starting with the given string."
    id_not_starts_with: ID
    "All values starting with the given string."
    id_starts_with: ID
    publishedAt: DateTime
    "All values greater than the given value."
    publishedAt_gt: DateTime
    "All values greater than or equal the given value."
    publishedAt_gte: DateTime
    "All values that are contained in given list."
    publishedAt_in: [DateTime]
    "All values less than the given value."
    publishedAt_lt: DateTime
    "All values less than or equal the given value."
    publishedAt_lte: DateTime
    "All values that are not equal to given value."
    publishedAt_not: DateTime
    "All values that are not contained in given list."
    publishedAt_not_in: [DateTime]
    publishedBy: UserWhereInput
    release: ScheduledReleaseWhereInput
    status: ScheduledOperationStatus
    "All values that are contained in given list."
    status_in: [ScheduledOperationStatus]
    "All values that are not equal to given value."
    status_not: ScheduledOperationStatus
    "All values that are not contained in given list."
    status_not_in: [ScheduledOperationStatus]
    updatedAt: DateTime
    "All values greater than the given value."
    updatedAt_gt: DateTime
    "All values greater than or equal the given value."
    updatedAt_gte: DateTime
    "All values that are contained in given list."
    updatedAt_in: [DateTime]
    "All values less than the given value."
    updatedAt_lt: DateTime
    "All values less than or equal the given value."
    updatedAt_lte: DateTime
    "All values that are not equal to given value."
    updatedAt_not: DateTime
    "All values that are not contained in given list."
    updatedAt_not_in: [DateTime]
    updatedBy: UserWhereInput
}

"References ScheduledOperation record uniquely"
input ScheduledOperationWhereUniqueInput {
    id: ID
}

input ScheduledReleaseConnectInput {
    "Allow to specify document position in list of connected documents, will default to appending at end of list"
    position: ConnectPositionInput
    "Document to connect"
    where: ScheduledReleaseWhereUniqueInput!
}

input ScheduledReleaseCreateInput {
    createdAt: DateTime
    description: String
    errorMessage: String
    isActive: Boolean = true
    releaseAt: DateTime
    title: String
    updatedAt: DateTime
}

input ScheduledReleaseCreateManyInlineInput {
    "Connect multiple existing ScheduledRelease documents"
    connect: [ScheduledReleaseWhereUniqueInput!]
    "Create and connect multiple existing ScheduledRelease documents"
    create: [ScheduledReleaseCreateInput!]
}

input ScheduledReleaseCreateOneInlineInput {
    "Connect one existing ScheduledRelease document"
    connect: ScheduledReleaseWhereUniqueInput
    "Create and connect one ScheduledRelease document"
    create: ScheduledReleaseCreateInput
}

"Identifies documents"
input ScheduledReleaseManyWhereInput {
    "Logical AND on all given filters."
    AND: [ScheduledReleaseWhereInput!]
    "Logical NOT on all given filters combined by AND."
    NOT: [ScheduledReleaseWhereInput!]
    "Logical OR on all given filters."
    OR: [ScheduledReleaseWhereInput!]
    "Contains search across all appropriate fields."
    _search: String
    createdAt: DateTime
    "All values greater than the given value."
    createdAt_gt: DateTime
    "All values greater than or equal the given value."
    createdAt_gte: DateTime
    "All values that are contained in given list."
    createdAt_in: [DateTime]
    "All values less than the given value."
    createdAt_lt: DateTime
    "All values less than or equal the given value."
    createdAt_lte: DateTime
    "All values that are not equal to given value."
    createdAt_not: DateTime
    "All values that are not contained in given list."
    createdAt_not_in: [DateTime]
    createdBy: UserWhereInput
    description: String
    "All values containing the given string."
    description_contains: String
    "All values ending with the given string."
    description_ends_with: String
    "All values that are contained in given list."
    description_in: [String]
    "All values that are not equal to given value."
    description_not: String
    "All values not containing the given string."
    description_not_contains: String
    "All values not ending with the given string"
    description_not_ends_with: String
    "All values that are not contained in given list."
    description_not_in: [String]
    "All values not starting with the given string."
    description_not_starts_with: String
    "All values starting with the given string."
    description_starts_with: String
    errorMessage: String
    "All values containing the given string."
    errorMessage_contains: String
    "All values ending with the given string."
    errorMessage_ends_with: String
    "All values that are contained in given list."
    errorMessage_in: [String]
    "All values that are not equal to given value."
    errorMessage_not: String
    "All values not containing the given string."
    errorMessage_not_contains: String
    "All values not ending with the given string"
    errorMessage_not_ends_with: String
    "All values that are not contained in given list."
    errorMessage_not_in: [String]
    "All values not starting with the given string."
    errorMessage_not_starts_with: String
    "All values starting with the given string."
    errorMessage_starts_with: String
    id: ID
    "All values containing the given string."
    id_contains: ID
    "All values ending with the given string."
    id_ends_with: ID
    "All values that are contained in given list."
    id_in: [ID]
    "All values that are not equal to given value."
    id_not: ID
    "All values not containing the given string."
    id_not_contains: ID
    "All values not ending with the given string"
    id_not_ends_with: ID
    "All values that are not contained in given list."
    id_not_in: [ID]
    "All values not starting with the given string."
    id_not_starts_with: ID
    "All values starting with the given string."
    id_starts_with: ID
    isActive: Boolean
    "All values that are not equal to given value."
    isActive_not: Boolean
    isImplicit: Boolean
    "All values that are not equal to given value."
    isImplicit_not: Boolean
    operations_every: ScheduledOperationWhereInput
    operations_none: ScheduledOperationWhereInput
    operations_some: ScheduledOperationWhereInput
    publishedAt: DateTime
    "All values greater than the given value."
    publishedAt_gt: DateTime
    "All values greater than or equal the given value."
    publishedAt_gte: DateTime
    "All values that are contained in given list."
    publishedAt_in: [DateTime]
    "All values less than the given value."
    publishedAt_lt: DateTime
    "All values less than or equal the given value."
    publishedAt_lte: DateTime
    "All values that are not equal to given value."
    publishedAt_not: DateTime
    "All values that are not contained in given list."
    publishedAt_not_in: [DateTime]
    publishedBy: UserWhereInput
    releaseAt: DateTime
    "All values greater than the given value."
    releaseAt_gt: DateTime
    "All values greater than or equal the given value."
    releaseAt_gte: DateTime
    "All values that are contained in given list."
    releaseAt_in: [DateTime]
    "All values less than the given value."
    releaseAt_lt: DateTime
    "All values less than or equal the given value."
    releaseAt_lte: DateTime
    "All values that are not equal to given value."
    releaseAt_not: DateTime
    "All values that are not contained in given list."
    releaseAt_not_in: [DateTime]
    status: ScheduledReleaseStatus
    "All values that are contained in given list."
    status_in: [ScheduledReleaseStatus]
    "All values that are not equal to given value."
    status_not: ScheduledReleaseStatus
    "All values that are not contained in given list."
    status_not_in: [ScheduledReleaseStatus]
    title: String
    "All values containing the given string."
    title_contains: String
    "All values ending with the given string."
    title_ends_with: String
    "All values that are contained in given list."
    title_in: [String]
    "All values that are not equal to given value."
    title_not: String
    "All values not containing the given string."
    title_not_contains: String
    "All values not ending with the given string"
    title_not_ends_with: String
    "All values that are not contained in given list."
    title_not_in: [String]
    "All values not starting with the given string."
    title_not_starts_with: String
    "All values starting with the given string."
    title_starts_with: String
    updatedAt: DateTime
    "All values greater than the given value."
    updatedAt_gt: DateTime
    "All values greater than or equal the given value."
    updatedAt_gte: DateTime
    "All values that are contained in given list."
    updatedAt_in: [DateTime]
    "All values less than the given value."
    updatedAt_lt: DateTime
    "All values less than or equal the given value."
    updatedAt_lte: DateTime
    "All values that are not equal to given value."
    updatedAt_not: DateTime
    "All values that are not contained in given list."
    updatedAt_not_in: [DateTime]
    updatedBy: UserWhereInput
}

input ScheduledReleaseUpdateInput {
    description: String
    errorMessage: String
    isActive: Boolean
    releaseAt: DateTime
    title: String
}

input ScheduledReleaseUpdateManyInlineInput {
    "Connect multiple existing ScheduledRelease documents"
    connect: [ScheduledReleaseConnectInput!]
    "Create and connect multiple ScheduledRelease documents"
    create: [ScheduledReleaseCreateInput!]
    "Delete multiple ScheduledRelease documents"
    delete: [ScheduledReleaseWhereUniqueInput!]
    "Disconnect multiple ScheduledRelease documents"
    disconnect: [ScheduledReleaseWhereUniqueInput!]
    "Override currently-connected documents with multiple existing ScheduledRelease documents"
    set: [ScheduledReleaseWhereUniqueInput!]
    "Update multiple ScheduledRelease documents"
    update: [ScheduledReleaseUpdateWithNestedWhereUniqueInput!]
    "Upsert multiple ScheduledRelease documents"
    upsert: [ScheduledReleaseUpsertWithNestedWhereUniqueInput!]
}

input ScheduledReleaseUpdateManyInput {
    description: String
    errorMessage: String
    isActive: Boolean
    releaseAt: DateTime
    title: String
}

input ScheduledReleaseUpdateManyWithNestedWhereInput {
    "Update many input"
    data: ScheduledReleaseUpdateManyInput!
    "Document search"
    where: ScheduledReleaseWhereInput!
}

input ScheduledReleaseUpdateOneInlineInput {
    "Connect existing ScheduledRelease document"
    connect: ScheduledReleaseWhereUniqueInput
    "Create and connect one ScheduledRelease document"
    create: ScheduledReleaseCreateInput
    "Delete currently connected ScheduledRelease document"
    delete: Boolean
    "Disconnect currently connected ScheduledRelease document"
    disconnect: Boolean
    "Update single ScheduledRelease document"
    update: ScheduledReleaseUpdateWithNestedWhereUniqueInput
    "Upsert single ScheduledRelease document"
    upsert: ScheduledReleaseUpsertWithNestedWhereUniqueInput
}

input ScheduledReleaseUpdateWithNestedWhereUniqueInput {
    "Document to update"
    data: ScheduledReleaseUpdateInput!
    "Unique document search"
    where: ScheduledReleaseWhereUniqueInput!
}

input ScheduledReleaseUpsertInput {
    "Create document if it didn't exist"
    create: ScheduledReleaseCreateInput!
    "Update document if it exists"
    update: ScheduledReleaseUpdateInput!
}

input ScheduledReleaseUpsertWithNestedWhereUniqueInput {
    "Upsert data"
    data: ScheduledReleaseUpsertInput!
    "Unique document search"
    where: ScheduledReleaseWhereUniqueInput!
}

"Identifies documents"
input ScheduledReleaseWhereInput {
    "Logical AND on all given filters."
    AND: [ScheduledReleaseWhereInput!]
    "Logical NOT on all given filters combined by AND."
    NOT: [ScheduledReleaseWhereInput!]
    "Logical OR on all given filters."
    OR: [ScheduledReleaseWhereInput!]
    "Contains search across all appropriate fields."
    _search: String
    createdAt: DateTime
    "All values greater than the given value."
    createdAt_gt: DateTime
    "All values greater than or equal the given value."
    createdAt_gte: DateTime
    "All values that are contained in given list."
    createdAt_in: [DateTime]
    "All values less than the given value."
    createdAt_lt: DateTime
    "All values less than or equal the given value."
    createdAt_lte: DateTime
    "All values that are not equal to given value."
    createdAt_not: DateTime
    "All values that are not contained in given list."
    createdAt_not_in: [DateTime]
    createdBy: UserWhereInput
    description: String
    "All values containing the given string."
    description_contains: String
    "All values ending with the given string."
    description_ends_with: String
    "All values that are contained in given list."
    description_in: [String]
    "All values that are not equal to given value."
    description_not: String
    "All values not containing the given string."
    description_not_contains: String
    "All values not ending with the given string"
    description_not_ends_with: String
    "All values that are not contained in given list."
    description_not_in: [String]
    "All values not starting with the given string."
    description_not_starts_with: String
    "All values starting with the given string."
    description_starts_with: String
    errorMessage: String
    "All values containing the given string."
    errorMessage_contains: String
    "All values ending with the given string."
    errorMessage_ends_with: String
    "All values that are contained in given list."
    errorMessage_in: [String]
    "All values that are not equal to given value."
    errorMessage_not: String
    "All values not containing the given string."
    errorMessage_not_contains: String
    "All values not ending with the given string"
    errorMessage_not_ends_with: String
    "All values that are not contained in given list."
    errorMessage_not_in: [String]
    "All values not starting with the given string."
    errorMessage_not_starts_with: String
    "All values starting with the given string."
    errorMessage_starts_with: String
    id: ID
    "All values containing the given string."
    id_contains: ID
    "All values ending with the given string."
    id_ends_with: ID
    "All values that are contained in given list."
    id_in: [ID]
    "All values that are not equal to given value."
    id_not: ID
    "All values not containing the given string."
    id_not_contains: ID
    "All values not ending with the given string"
    id_not_ends_with: ID
    "All values that are not contained in given list."
    id_not_in: [ID]
    "All values not starting with the given string."
    id_not_starts_with: ID
    "All values starting with the given string."
    id_starts_with: ID
    isActive: Boolean
    "All values that are not equal to given value."
    isActive_not: Boolean
    isImplicit: Boolean
    "All values that are not equal to given value."
    isImplicit_not: Boolean
    operations_every: ScheduledOperationWhereInput
    operations_none: ScheduledOperationWhereInput
    operations_some: ScheduledOperationWhereInput
    publishedAt: DateTime
    "All values greater than the given value."
    publishedAt_gt: DateTime
    "All values greater than or equal the given value."
    publishedAt_gte: DateTime
    "All values that are contained in given list."
    publishedAt_in: [DateTime]
    "All values less than the given value."
    publishedAt_lt: DateTime
    "All values less than or equal the given value."
    publishedAt_lte: DateTime
    "All values that are not equal to given value."
    publishedAt_not: DateTime
    "All values that are not contained in given list."
    publishedAt_not_in: [DateTime]
    publishedBy: UserWhereInput
    releaseAt: DateTime
    "All values greater than the given value."
    releaseAt_gt: DateTime
    "All values greater than or equal the given value."
    releaseAt_gte: DateTime
    "All values that are contained in given list."
    releaseAt_in: [DateTime]
    "All values less than the given value."
    releaseAt_lt: DateTime
    "All values less than or equal the given value."
    releaseAt_lte: DateTime
    "All values that are not equal to given value."
    releaseAt_not: DateTime
    "All values that are not contained in given list."
    releaseAt_not_in: [DateTime]
    status: ScheduledReleaseStatus
    "All values that are contained in given list."
    status_in: [ScheduledReleaseStatus]
    "All values that are not equal to given value."
    status_not: ScheduledReleaseStatus
    "All values that are not contained in given list."
    status_not_in: [ScheduledReleaseStatus]
    title: String
    "All values containing the given string."
    title_contains: String
    "All values ending with the given string."
    title_ends_with: String
    "All values that are contained in given list."
    title_in: [String]
    "All values that are not equal to given value."
    title_not: String
    "All values not containing the given string."
    title_not_contains: String
    "All values not ending with the given string"
    title_not_ends_with: String
    "All values that are not contained in given list."
    title_not_in: [String]
    "All values not starting with the given string."
    title_not_starts_with: String
    "All values starting with the given string."
    title_starts_with: String
    updatedAt: DateTime
    "All values greater than the given value."
    updatedAt_gt: DateTime
    "All values greater than or equal the given value."
    updatedAt_gte: DateTime
    "All values that are contained in given list."
    updatedAt_in: [DateTime]
    "All values less than the given value."
    updatedAt_lt: DateTime
    "All values less than or equal the given value."
    updatedAt_lte: DateTime
    "All values that are not equal to given value."
    updatedAt_not: DateTime
    "All values that are not contained in given list."
    updatedAt_not_in: [DateTime]
    updatedBy: UserWhereInput
}

"References ScheduledRelease record uniquely"
input ScheduledReleaseWhereUniqueInput {
    id: ID
}

input SubCategoryConnectInput {
    "Allow to specify document position in list of connected documents, will default to appending at end of list"
    position: ConnectPositionInput
    "Document to connect"
    where: SubCategoryWhereUniqueInput!
}

input SubCategoryCreateInput {
    createdAt: DateTime
    files: FileCreateManyInlineInput
    name: String!
    posts: PostCreateManyInlineInput
    slug: String!
    updatedAt: DateTime
}

input SubCategoryCreateManyInlineInput {
    "Connect multiple existing SubCategory documents"
    connect: [SubCategoryWhereUniqueInput!]
    "Create and connect multiple existing SubCategory documents"
    create: [SubCategoryCreateInput!]
}

input SubCategoryCreateOneInlineInput {
    "Connect one existing SubCategory document"
    connect: SubCategoryWhereUniqueInput
    "Create and connect one SubCategory document"
    create: SubCategoryCreateInput
}

"Identifies documents"
input SubCategoryManyWhereInput {
    "Logical AND on all given filters."
    AND: [SubCategoryWhereInput!]
    "Logical NOT on all given filters combined by AND."
    NOT: [SubCategoryWhereInput!]
    "Logical OR on all given filters."
    OR: [SubCategoryWhereInput!]
    "Contains search across all appropriate fields."
    _search: String
    createdAt: DateTime
    "All values greater than the given value."
    createdAt_gt: DateTime
    "All values greater than or equal the given value."
    createdAt_gte: DateTime
    "All values that are contained in given list."
    createdAt_in: [DateTime]
    "All values less than the given value."
    createdAt_lt: DateTime
    "All values less than or equal the given value."
    createdAt_lte: DateTime
    "All values that are not equal to given value."
    createdAt_not: DateTime
    "All values that are not contained in given list."
    createdAt_not_in: [DateTime]
    createdBy: UserWhereInput
    documentInStages_every: SubCategoryWhereStageInput
    documentInStages_none: SubCategoryWhereStageInput
    documentInStages_some: SubCategoryWhereStageInput
    files_every: FileWhereInput
    files_none: FileWhereInput
    files_some: FileWhereInput
    id: ID
    "All values containing the given string."
    id_contains: ID
    "All values ending with the given string."
    id_ends_with: ID
    "All values that are contained in given list."
    id_in: [ID]
    "All values that are not equal to given value."
    id_not: ID
    "All values not containing the given string."
    id_not_contains: ID
    "All values not ending with the given string"
    id_not_ends_with: ID
    "All values that are not contained in given list."
    id_not_in: [ID]
    "All values not starting with the given string."
    id_not_starts_with: ID
    "All values starting with the given string."
    id_starts_with: ID
    name: String
    "All values containing the given string."
    name_contains: String
    "All values ending with the given string."
    name_ends_with: String
    "All values that are contained in given list."
    name_in: [String]
    "All values that are not equal to given value."
    name_not: String
    "All values not containing the given string."
    name_not_contains: String
    "All values not ending with the given string"
    name_not_ends_with: String
    "All values that are not contained in given list."
    name_not_in: [String]
    "All values not starting with the given string."
    name_not_starts_with: String
    "All values starting with the given string."
    name_starts_with: String
    posts_every: PostWhereInput
    posts_none: PostWhereInput
    posts_some: PostWhereInput
    publishedAt: DateTime
    "All values greater than the given value."
    publishedAt_gt: DateTime
    "All values greater than or equal the given value."
    publishedAt_gte: DateTime
    "All values that are contained in given list."
    publishedAt_in: [DateTime]
    "All values less than the given value."
    publishedAt_lt: DateTime
    "All values less than or equal the given value."
    publishedAt_lte: DateTime
    "All values that are not equal to given value."
    publishedAt_not: DateTime
    "All values that are not contained in given list."
    publishedAt_not_in: [DateTime]
    publishedBy: UserWhereInput
    scheduledIn_every: ScheduledOperationWhereInput
    scheduledIn_none: ScheduledOperationWhereInput
    scheduledIn_some: ScheduledOperationWhereInput
    slug: String
    "All values containing the given string."
    slug_contains: String
    "All values ending with the given string."
    slug_ends_with: String
    "All values that are contained in given list."
    slug_in: [String]
    "All values that are not equal to given value."
    slug_not: String
    "All values not containing the given string."
    slug_not_contains: String
    "All values not ending with the given string"
    slug_not_ends_with: String
    "All values that are not contained in given list."
    slug_not_in: [String]
    "All values not starting with the given string."
    slug_not_starts_with: String
    "All values starting with the given string."
    slug_starts_with: String
    updatedAt: DateTime
    "All values greater than the given value."
    updatedAt_gt: DateTime
    "All values greater than or equal the given value."
    updatedAt_gte: DateTime
    "All values that are contained in given list."
    updatedAt_in: [DateTime]
    "All values less than the given value."
    updatedAt_lt: DateTime
    "All values less than or equal the given value."
    updatedAt_lte: DateTime
    "All values that are not equal to given value."
    updatedAt_not: DateTime
    "All values that are not contained in given list."
    updatedAt_not_in: [DateTime]
    updatedBy: UserWhereInput
}

input SubCategoryUpdateInput {
    files: FileUpdateManyInlineInput
    name: String
    posts: PostUpdateManyInlineInput
    slug: String
}

input SubCategoryUpdateManyInlineInput {
    "Connect multiple existing SubCategory documents"
    connect: [SubCategoryConnectInput!]
    "Create and connect multiple SubCategory documents"
    create: [SubCategoryCreateInput!]
    "Delete multiple SubCategory documents"
    delete: [SubCategoryWhereUniqueInput!]
    "Disconnect multiple SubCategory documents"
    disconnect: [SubCategoryWhereUniqueInput!]
    "Override currently-connected documents with multiple existing SubCategory documents"
    set: [SubCategoryWhereUniqueInput!]
    "Update multiple SubCategory documents"
    update: [SubCategoryUpdateWithNestedWhereUniqueInput!]
    "Upsert multiple SubCategory documents"
    upsert: [SubCategoryUpsertWithNestedWhereUniqueInput!]
}

input SubCategoryUpdateManyInput {
    "No fields in updateMany data input"
    _: String
}

input SubCategoryUpdateManyWithNestedWhereInput {
    "Update many input"
    data: SubCategoryUpdateManyInput!
    "Document search"
    where: SubCategoryWhereInput!
}

input SubCategoryUpdateOneInlineInput {
    "Connect existing SubCategory document"
    connect: SubCategoryWhereUniqueInput
    "Create and connect one SubCategory document"
    create: SubCategoryCreateInput
    "Delete currently connected SubCategory document"
    delete: Boolean
    "Disconnect currently connected SubCategory document"
    disconnect: Boolean
    "Update single SubCategory document"
    update: SubCategoryUpdateWithNestedWhereUniqueInput
    "Upsert single SubCategory document"
    upsert: SubCategoryUpsertWithNestedWhereUniqueInput
}

input SubCategoryUpdateWithNestedWhereUniqueInput {
    "Document to update"
    data: SubCategoryUpdateInput!
    "Unique document search"
    where: SubCategoryWhereUniqueInput!
}

input SubCategoryUpsertInput {
    "Create document if it didn't exist"
    create: SubCategoryCreateInput!
    "Update document if it exists"
    update: SubCategoryUpdateInput!
}

input SubCategoryUpsertWithNestedWhereUniqueInput {
    "Upsert data"
    data: SubCategoryUpsertInput!
    "Unique document search"
    where: SubCategoryWhereUniqueInput!
}

"This contains a set of filters that can be used to compare values internally"
input SubCategoryWhereComparatorInput {
    "This field can be used to request to check if the entry is outdated by internal comparison"
    outdated_to: Boolean
}

"Identifies documents"
input SubCategoryWhereInput {
    "Logical AND on all given filters."
    AND: [SubCategoryWhereInput!]
    "Logical NOT on all given filters combined by AND."
    NOT: [SubCategoryWhereInput!]
    "Logical OR on all given filters."
    OR: [SubCategoryWhereInput!]
    "Contains search across all appropriate fields."
    _search: String
    createdAt: DateTime
    "All values greater than the given value."
    createdAt_gt: DateTime
    "All values greater than or equal the given value."
    createdAt_gte: DateTime
    "All values that are contained in given list."
    createdAt_in: [DateTime]
    "All values less than the given value."
    createdAt_lt: DateTime
    "All values less than or equal the given value."
    createdAt_lte: DateTime
    "All values that are not equal to given value."
    createdAt_not: DateTime
    "All values that are not contained in given list."
    createdAt_not_in: [DateTime]
    createdBy: UserWhereInput
    documentInStages_every: SubCategoryWhereStageInput
    documentInStages_none: SubCategoryWhereStageInput
    documentInStages_some: SubCategoryWhereStageInput
    files_every: FileWhereInput
    files_none: FileWhereInput
    files_some: FileWhereInput
    id: ID
    "All values containing the given string."
    id_contains: ID
    "All values ending with the given string."
    id_ends_with: ID
    "All values that are contained in given list."
    id_in: [ID]
    "All values that are not equal to given value."
    id_not: ID
    "All values not containing the given string."
    id_not_contains: ID
    "All values not ending with the given string"
    id_not_ends_with: ID
    "All values that are not contained in given list."
    id_not_in: [ID]
    "All values not starting with the given string."
    id_not_starts_with: ID
    "All values starting with the given string."
    id_starts_with: ID
    name: String
    "All values containing the given string."
    name_contains: String
    "All values ending with the given string."
    name_ends_with: String
    "All values that are contained in given list."
    name_in: [String]
    "All values that are not equal to given value."
    name_not: String
    "All values not containing the given string."
    name_not_contains: String
    "All values not ending with the given string"
    name_not_ends_with: String
    "All values that are not contained in given list."
    name_not_in: [String]
    "All values not starting with the given string."
    name_not_starts_with: String
    "All values starting with the given string."
    name_starts_with: String
    posts_every: PostWhereInput
    posts_none: PostWhereInput
    posts_some: PostWhereInput
    publishedAt: DateTime
    "All values greater than the given value."
    publishedAt_gt: DateTime
    "All values greater than or equal the given value."
    publishedAt_gte: DateTime
    "All values that are contained in given list."
    publishedAt_in: [DateTime]
    "All values less than the given value."
    publishedAt_lt: DateTime
    "All values less than or equal the given value."
    publishedAt_lte: DateTime
    "All values that are not equal to given value."
    publishedAt_not: DateTime
    "All values that are not contained in given list."
    publishedAt_not_in: [DateTime]
    publishedBy: UserWhereInput
    scheduledIn_every: ScheduledOperationWhereInput
    scheduledIn_none: ScheduledOperationWhereInput
    scheduledIn_some: ScheduledOperationWhereInput
    slug: String
    "All values containing the given string."
    slug_contains: String
    "All values ending with the given string."
    slug_ends_with: String
    "All values that are contained in given list."
    slug_in: [String]
    "All values that are not equal to given value."
    slug_not: String
    "All values not containing the given string."
    slug_not_contains: String
    "All values not ending with the given string"
    slug_not_ends_with: String
    "All values that are not contained in given list."
    slug_not_in: [String]
    "All values not starting with the given string."
    slug_not_starts_with: String
    "All values starting with the given string."
    slug_starts_with: String
    updatedAt: DateTime
    "All values greater than the given value."
    updatedAt_gt: DateTime
    "All values greater than or equal the given value."
    updatedAt_gte: DateTime
    "All values that are contained in given list."
    updatedAt_in: [DateTime]
    "All values less than the given value."
    updatedAt_lt: DateTime
    "All values less than or equal the given value."
    updatedAt_lte: DateTime
    "All values that are not equal to given value."
    updatedAt_not: DateTime
    "All values that are not contained in given list."
    updatedAt_not_in: [DateTime]
    updatedBy: UserWhereInput
}

"The document in stages filter allows specifying a stage entry to cross compare the same document between different stages"
input SubCategoryWhereStageInput {
    "Logical AND on all given filters."
    AND: [SubCategoryWhereStageInput!]
    "Logical NOT on all given filters combined by AND."
    NOT: [SubCategoryWhereStageInput!]
    "Logical OR on all given filters."
    OR: [SubCategoryWhereStageInput!]
    "This field contains fields which can be set as true or false to specify an internal comparison"
    compareWithParent: SubCategoryWhereComparatorInput
    "Specify the stage to compare with"
    stage: Stage
}

"References SubCategory record uniquely"
input SubCategoryWhereUniqueInput {
    id: ID
    name: String
    slug: String
}

input UnpublishLocaleInput {
    "Locales to unpublish"
    locale: Locale!
    "Stages to unpublish selected locales from"
    stages: [Stage!]!
}

input UserConnectInput {
    "Allow to specify document position in list of connected documents, will default to appending at end of list"
    position: ConnectPositionInput
    "Document to connect"
    where: UserWhereUniqueInput!
}

input UserCreateManyInlineInput {
    "Connect multiple existing User documents"
    connect: [UserWhereUniqueInput!]
}

input UserCreateOneInlineInput {
    "Connect one existing User document"
    connect: UserWhereUniqueInput
}

"Identifies documents"
input UserManyWhereInput {
    "Logical AND on all given filters."
    AND: [UserWhereInput!]
    "Logical NOT on all given filters combined by AND."
    NOT: [UserWhereInput!]
    "Logical OR on all given filters."
    OR: [UserWhereInput!]
    "Contains search across all appropriate fields."
    _search: String
    createdAt: DateTime
    "All values greater than the given value."
    createdAt_gt: DateTime
    "All values greater than or equal the given value."
    createdAt_gte: DateTime
    "All values that are contained in given list."
    createdAt_in: [DateTime]
    "All values less than the given value."
    createdAt_lt: DateTime
    "All values less than or equal the given value."
    createdAt_lte: DateTime
    "All values that are not equal to given value."
    createdAt_not: DateTime
    "All values that are not contained in given list."
    createdAt_not_in: [DateTime]
    documentInStages_every: UserWhereStageInput
    documentInStages_none: UserWhereStageInput
    documentInStages_some: UserWhereStageInput
    id: ID
    "All values containing the given string."
    id_contains: ID
    "All values ending with the given string."
    id_ends_with: ID
    "All values that are contained in given list."
    id_in: [ID]
    "All values that are not equal to given value."
    id_not: ID
    "All values not containing the given string."
    id_not_contains: ID
    "All values not ending with the given string"
    id_not_ends_with: ID
    "All values that are not contained in given list."
    id_not_in: [ID]
    "All values not starting with the given string."
    id_not_starts_with: ID
    "All values starting with the given string."
    id_starts_with: ID
    isActive: Boolean
    "All values that are not equal to given value."
    isActive_not: Boolean
    kind: UserKind
    "All values that are contained in given list."
    kind_in: [UserKind]
    "All values that are not equal to given value."
    kind_not: UserKind
    "All values that are not contained in given list."
    kind_not_in: [UserKind]
    name: String
    "All values containing the given string."
    name_contains: String
    "All values ending with the given string."
    name_ends_with: String
    "All values that are contained in given list."
    name_in: [String]
    "All values that are not equal to given value."
    name_not: String
    "All values not containing the given string."
    name_not_contains: String
    "All values not ending with the given string"
    name_not_ends_with: String
    "All values that are not contained in given list."
    name_not_in: [String]
    "All values not starting with the given string."
    name_not_starts_with: String
    "All values starting with the given string."
    name_starts_with: String
    picture: String
    "All values containing the given string."
    picture_contains: String
    "All values ending with the given string."
    picture_ends_with: String
    "All values that are contained in given list."
    picture_in: [String]
    "All values that are not equal to given value."
    picture_not: String
    "All values not containing the given string."
    picture_not_contains: String
    "All values not ending with the given string"
    picture_not_ends_with: String
    "All values that are not contained in given list."
    picture_not_in: [String]
    "All values not starting with the given string."
    picture_not_starts_with: String
    "All values starting with the given string."
    picture_starts_with: String
    publishedAt: DateTime
    "All values greater than the given value."
    publishedAt_gt: DateTime
    "All values greater than or equal the given value."
    publishedAt_gte: DateTime
    "All values that are contained in given list."
    publishedAt_in: [DateTime]
    "All values less than the given value."
    publishedAt_lt: DateTime
    "All values less than or equal the given value."
    publishedAt_lte: DateTime
    "All values that are not equal to given value."
    publishedAt_not: DateTime
    "All values that are not contained in given list."
    publishedAt_not_in: [DateTime]
    updatedAt: DateTime
    "All values greater than the given value."
    updatedAt_gt: DateTime
    "All values greater than or equal the given value."
    updatedAt_gte: DateTime
    "All values that are contained in given list."
    updatedAt_in: [DateTime]
    "All values less than the given value."
    updatedAt_lt: DateTime
    "All values less than or equal the given value."
    updatedAt_lte: DateTime
    "All values that are not equal to given value."
    updatedAt_not: DateTime
    "All values that are not contained in given list."
    updatedAt_not_in: [DateTime]
}

input UserUpdateManyInlineInput {
    "Connect multiple existing User documents"
    connect: [UserConnectInput!]
    "Disconnect multiple User documents"
    disconnect: [UserWhereUniqueInput!]
    "Override currently-connected documents with multiple existing User documents"
    set: [UserWhereUniqueInput!]
}

input UserUpdateOneInlineInput {
    "Connect existing User document"
    connect: UserWhereUniqueInput
    "Disconnect currently connected User document"
    disconnect: Boolean
}

"This contains a set of filters that can be used to compare values internally"
input UserWhereComparatorInput {
    "This field can be used to request to check if the entry is outdated by internal comparison"
    outdated_to: Boolean
}

"Identifies documents"
input UserWhereInput {
    "Logical AND on all given filters."
    AND: [UserWhereInput!]
    "Logical NOT on all given filters combined by AND."
    NOT: [UserWhereInput!]
    "Logical OR on all given filters."
    OR: [UserWhereInput!]
    "Contains search across all appropriate fields."
    _search: String
    createdAt: DateTime
    "All values greater than the given value."
    createdAt_gt: DateTime
    "All values greater than or equal the given value."
    createdAt_gte: DateTime
    "All values that are contained in given list."
    createdAt_in: [DateTime]
    "All values less than the given value."
    createdAt_lt: DateTime
    "All values less than or equal the given value."
    createdAt_lte: DateTime
    "All values that are not equal to given value."
    createdAt_not: DateTime
    "All values that are not contained in given list."
    createdAt_not_in: [DateTime]
    documentInStages_every: UserWhereStageInput
    documentInStages_none: UserWhereStageInput
    documentInStages_some: UserWhereStageInput
    id: ID
    "All values containing the given string."
    id_contains: ID
    "All values ending with the given string."
    id_ends_with: ID
    "All values that are contained in given list."
    id_in: [ID]
    "All values that are not equal to given value."
    id_not: ID
    "All values not containing the given string."
    id_not_contains: ID
    "All values not ending with the given string"
    id_not_ends_with: ID
    "All values that are not contained in given list."
    id_not_in: [ID]
    "All values not starting with the given string."
    id_not_starts_with: ID
    "All values starting with the given string."
    id_starts_with: ID
    isActive: Boolean
    "All values that are not equal to given value."
    isActive_not: Boolean
    kind: UserKind
    "All values that are contained in given list."
    kind_in: [UserKind]
    "All values that are not equal to given value."
    kind_not: UserKind
    "All values that are not contained in given list."
    kind_not_in: [UserKind]
    name: String
    "All values containing the given string."
    name_contains: String
    "All values ending with the given string."
    name_ends_with: String
    "All values that are contained in given list."
    name_in: [String]
    "All values that are not equal to given value."
    name_not: String
    "All values not containing the given string."
    name_not_contains: String
    "All values not ending with the given string"
    name_not_ends_with: String
    "All values that are not contained in given list."
    name_not_in: [String]
    "All values not starting with the given string."
    name_not_starts_with: String
    "All values starting with the given string."
    name_starts_with: String
    picture: String
    "All values containing the given string."
    picture_contains: String
    "All values ending with the given string."
    picture_ends_with: String
    "All values that are contained in given list."
    picture_in: [String]
    "All values that are not equal to given value."
    picture_not: String
    "All values not containing the given string."
    picture_not_contains: String
    "All values not ending with the given string"
    picture_not_ends_with: String
    "All values that are not contained in given list."
    picture_not_in: [String]
    "All values not starting with the given string."
    picture_not_starts_with: String
    "All values starting with the given string."
    picture_starts_with: String
    publishedAt: DateTime
    "All values greater than the given value."
    publishedAt_gt: DateTime
    "All values greater than or equal the given value."
    publishedAt_gte: DateTime
    "All values that are contained in given list."
    publishedAt_in: [DateTime]
    "All values less than the given value."
    publishedAt_lt: DateTime
    "All values less than or equal the given value."
    publishedAt_lte: DateTime
    "All values that are not equal to given value."
    publishedAt_not: DateTime
    "All values that are not contained in given list."
    publishedAt_not_in: [DateTime]
    updatedAt: DateTime
    "All values greater than the given value."
    updatedAt_gt: DateTime
    "All values greater than or equal the given value."
    updatedAt_gte: DateTime
    "All values that are contained in given list."
    updatedAt_in: [DateTime]
    "All values less than the given value."
    updatedAt_lt: DateTime
    "All values less than or equal the given value."
    updatedAt_lte: DateTime
    "All values that are not equal to given value."
    updatedAt_not: DateTime
    "All values that are not contained in given list."
    updatedAt_not_in: [DateTime]
}

"The document in stages filter allows specifying a stage entry to cross compare the same document between different stages"
input UserWhereStageInput {
    "Logical AND on all given filters."
    AND: [UserWhereStageInput!]
    "Logical NOT on all given filters combined by AND."
    NOT: [UserWhereStageInput!]
    "Logical OR on all given filters."
    OR: [UserWhereStageInput!]
    "This field contains fields which can be set as true or false to specify an internal comparison"
    compareWithParent: UserWhereComparatorInput
    "Specify the stage to compare with"
    stage: Stage
}

"References User record uniquely"
input UserWhereUniqueInput {
    id: ID
}

input VersionWhereInput {
    id: ID!
    revision: Int!
    stage: Stage!
}
